{"version":3,"sources":["screens/Chat/Chat.less","redux/chat/chat.actions.tsx","redux/chat/chat.reducer.tsx","redux/chat/chat.selectors.tsx","redux/chat/index.tsx","components/ChatMessage/ChatMessage.less","helper/ColorHelper.ts","redux/chat/chat.types.ts","components/BasicChatEntry/BasicChatEntry.less","components/BasicChatEntry/BasicChatEntry.tsx","helper/EmoteHelper.tsx","helper/LinkHelper.tsx","components/ChatMessage/ChatMessage.tsx","components/CheerMessage/CheerMessage.tsx","components/CheerMessage/CheerMessage.less","components/RaidMessage/RaidMessage.tsx","components/RaidMessage/RaidMessage.less","components/SubMessage/SubMessage.tsx","components/SubMessage/SubMessage.less","components/SubGiftMessage/SubGiftMessage.tsx","components/SubGiftMessage/SubGiftMessage.less","screens/Chat/Chat.tsx","redux/auth/auth.actions.tsx","redux/auth/auth.reducer.tsx","redux/auth/auth.selectors.tsx","redux/auth/index.tsx","redux/twitch/twitch.actions.tsx","redux/twitch/twitch.reducer.tsx","redux/twitch/twitch.selectors.tsx","redux/twitch/index.tsx","config.ts","redux/chat/chat.saga.ts","redux/auth/auth.saga.ts","redux/twitch/twitch.saga.ts","redux/saga.ts","redux/reducers.ts","redux/store.ts","screens/Auth/AuthHandler.tsx","components/Menu/UserInfo/UserInfo.tsx","screens/BaseScreen/BaseScreen.less","screens/BaseScreen/MainMenu/MainMenu.less","components/Menu/UserInfo/UserInfo.less","components/DropDownMenu/DropDownMenu.less","components/DropDownMenu/DropDownMenu.tsx","components/ChatInput/ChatInput.tsx","components/ChatInput/ChatInput.less","screens/BaseScreen/MainMenu/MainMenu.tsx","screens/BaseScreen/BaseScreen.tsx","screens/ChannelList/ChannelList.tsx","screens/ChannelList/ChannelList.less","App.tsx","reportWebVitals.ts","index.tsx"],"names":["selectChannel","createAction","channelJoined","chatMessage","chatMessageDeleted","banUser","timeoutUser","deleteMessage","reducer","createReducer","messages","userMessageCount","builder","addCase","state","action","channelName","payload","console","log","name","userstate","found","map","msg","id","subMessages","slice","messageId","deleted","getSubState","chat","getMessages","createSelector","getMessageCount","user","getChannelName","chatReducer","ChatEntryType","getColor","s","hash","str","i","length","charCodeAt","hashCode","chroma","hsl","hex","BasicChatEntry","timestamp","usercolor","username","message","messageClassName","messageColor","className","userClassName","type","messageCount","useSelector","chatSelectors","clsx","dayjs","format","style","minWidth","color","createCheerMessage","match","createEmoteMessage","emotes","msgArray","replacements","Object","entries","forEach","emoteId","positions","values","position","index","split","start","end","push","parseInt","stringToReplace","substring","replacement","display","width","src","tmpMsg","sort","a","b","splitted","replace","createLinks","URL_REGEX","part","test","target","href","ChatMessage","randomUserColor","String","Math","random","get","CheerMessage","bits","RaidMessage","SubMessage","SubGiftMessage","Chat","dispatch","useDispatch","location","useLocation","searchParams","qs","parse","search","useEffect","channel","chatActions","filter","words","noteCount","wordLengthRatio","startsWith","indexOf","cheer","raid","sub","subgift","processToken","logout","initialState","authActions","token","auth","getToken","isLoggedIn","authReducer","userInfoReceived","streamInfoReceived","getFollowedStreams","followedStreamsReceived","undefined","streamInfo","twitch","getUser","getUserId","getStreamInfo","twitchReducer","dotenv","config","CONFIG","TWITCH_CLIENT_ID","init","createClient","chatSaga","client","call","createTmiChannel","chatChannel","take","event","put","eventChannel","emit","on","e","self","Date","methods","months","numbOfSubs","streakMonths","recipient","deletedMessage","viewers","setTimeout","disconnect","userId","tmi","options","debug","messagesLogLevel","clientId","connection","secure","reconnect","identity","password","channels","connect","fork","delay","select","join","msgId","deletemessage","duration","reason","timeout","takeLatest","chatTask","race","twitchActions","tokenReceived","cancel","login","authSaga","axios","headers","data","getUserInfo","getBroadcasterId","getChannelInfo","requestFollowedStreams","twitchSaga","authSelectors","params","Error","broadcasterId","user_id","twitchSelectors","rootSaga","spawn","createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","sagaMiddleware","createSagaMiddleware","rootReducer","store","createStore","applyMiddleware","routerMiddleware","logger","run","LoginCallback","hashParams","access_token","id_token","AuthHandler","children","useHistory","path","UserInfo","profile_image_url","DropDownMenu","buttonComponent","items","origin","as","Button","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","item","Item","active","onClick","preventDefault","title","ChatInput","currentChannel","onSubmit","useState","value","setValue","placeholder","onKeyDown","key","onChange","MainMenu","window","encodeURIComponent","viewer_count","BaseScreen","ChannelList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.275cf035.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Chat.e8afa995.less\";","import { createAction } from '@reduxjs/toolkit';\nimport {\n    BanActionPayload,\n    ChatEntry,\n    ChatMessageDeleted,\n    DeleteMessageActionPayload,\n    TimeoutActionPayload,\n} from './chat.types';\n\nexport const types = {};\n\n\nexport const selectChannel = createAction<string, 'chat/channel'>('chat/channel');\nexport const channelJoined = createAction<string, 'chat/joined'>('chat/joined');\n\nexport const chatMessage = createAction<ChatEntry, 'chat/message'>('chat/message');\n\nexport const chatMessageDeleted = createAction<ChatMessageDeleted, 'chat/message-deleted'>('chat/message-deleted');\n\nexport const banUser = createAction<BanActionPayload, 'chat/ban'>('chat/ban');\nexport const timeoutUser = createAction<TimeoutActionPayload, 'chat/timeout'>('chat/timeout');\nexport const deleteMessage = createAction<DeleteMessageActionPayload, 'chat/delete-message'>('chat/delete-message');\n\n\nexport default {\n    chatMessage,\n    selectChannel,\n    channelJoined,\n    banUser,\n    timeoutUser,\n    deleteMessage,\n    chatMessageDeleted\n};\n","import {AnyAction} from \"redux\";\nimport { channelJoined, chatMessage, chatMessageDeleted } from './chat.actions';\nimport {createReducer} from \"@reduxjs/toolkit\";\nimport {ChatEntry} from \"./chat.types\";\nimport { chatActions } from './index';\nimport { twitchActions } from '../twitch';\n\n\nexport interface ChatStateType {\n    messages: ChatEntry[],\n    userMessageCount: { [username: string]: number },\n    channelName?: string,\n}\n\nconst initialState: ChatStateType = {\n    messages: [],\n    userMessageCount: {},\n};\n\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(channelJoined, (state, action) => {\n            return {\n                ...state,\n                channelName: action.payload,\n                messages: [],\n            }\n        })\n        .addCase(chatMessage, (state, action) => {\n            console.log(\"Chat message Case!\")\n            const name = action.payload.userstate['display-name'] || 'anonymous';\n\n            if (action.payload.userstate['reply-parent-msg-id']) {\n                let found = false;\n                state.messages = state.messages.map(msg => {\n                    if (msg.id === action.payload.userstate['reply-parent-msg-id']) {\n                        msg.subMessages = [...(msg.subMessages || []), action.payload]\n                        found = true;\n                    }\n                    return msg;\n                })\n\n                if(!found){\n                    state.messages = [action.payload, ...state.messages.slice(0, 300),];\n                }\n            } else {\n                state.messages = [action.payload, ...state.messages.slice(0, 300),];\n            }\n\n            state.userMessageCount = {\n                ...state.userMessageCount,\n                [name]: (state.userMessageCount[name] || 0) + 1,\n            }\n        })\n        .addCase(chatMessageDeleted, (state, action) => {\n            return {\n                ...state,\n                messages: state.messages.map(msg => {\n                    if(msg.id === action.payload.messageId){\n                        return {\n                            ...msg,\n                            deleted: true,\n                        }\n                    }\n                    return msg;\n                })\n            }\n        })\n    ;\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {ChatStateType} from \"./chat.reducer\";\n\nconst getSubState = (state: any) => state.chat as ChatStateType;\n\n\nconst getMessages = createSelector(getSubState, state => state.messages)\n\nconst getMessageCount = (user?: string) => createSelector(getSubState, state => state.userMessageCount[user || 'anonymous'] || 1);\n\n\nconst getChannelName = createSelector(getSubState, state => state.channelName)\n\n\nexport default {\n    getMessages,\n    getMessageCount,\n    getChannelName\n};\n","import chatReducer from './chat.reducer'\n\nexport {default as chatActions} from './chat.actions'\nexport {types as chatTypes} from './chat.actions'\nexport {default as chatSelectors} from './chat.selectors'\n\n\nexport default chatReducer;\n","export default __webpack_public_path__ + \"static/media/ChatMessage.ff8ee5b7.less\";","import chroma from 'chroma-js'\n\nexport function hashCode(str: string) { // java String#hashCode\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    return hash;\n}\n\nexport const getColor = (s : string) => {\n    let hash = hashCode(s);\n    return chroma.hsl(hash % 360, 0.7, 0.7).hex();\n}\n\nexport const isDark = (s: string) => {\n    //console.log(\"check darkgness\", s, chroma(s).get(\"lab.l\"));\n    return chroma(s).get(\"lab.l\") < 30;\n}\n\nexport const invertColor = (s: string) => {\n    return (Number(`0x1${s}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase()\n}\n","import { Userstate } from 'tmi.js';\n\nexport interface ChatEntry {\n    id?: string,\n    timestamp: Date,\n    userstate: Userstate,\n    message: string,\n    type: ChatEntryType,\n    subMessages?: ChatEntry[],\n    deleted?: boolean\n}\n\n\nexport interface ChatMessageDeleted {\n    channel: string,\n    username: string,\n    deletedMessage: string,\n    messageId?: string,\n}\n\n\nexport interface BanActionPayload {\n    username: string,\n    reason?: string,\n}\n\n\nexport interface TimeoutActionPayload {\n    username: string,\n    reason?: string,\n    duration?: number,\n}\n\nexport interface DeleteMessageActionPayload {\n    msgId: string,\n}\n\nexport enum ChatEntryType {\n    chat,\n    action,\n    cheer,\n    sub,\n    resub,\n    subgift,\n    submysterygift,\n    anonsubgift,\n    primepaidupgrade,\n    host,\n    raid,\n}\n\n\n// interface CheerType {\n//     timestamp: Date,\n//     userstate: ChatUserstate,\n//     message: string,\n// }\n//\n// interface SubscriptionType {\n//     timestamp: Date,\n//     userstate: SubUserstate,\n//     message: string,\n// }\n\n// enum ChatMessageType {}\n\n\n// interface chatStateType {\n//     messages: (ChatMessageType | SubscriptionType | CheerType)[],\n// }\n\n\n","export default __webpack_public_path__ + \"static/media/BasicChatEntry.c4a400d9.less\";","import React, { ReactNode } from 'react';\nimport './BasicChatEntry.less';\nimport dayjs from 'dayjs';\nimport clsx from 'clsx';\nimport { useSelector } from 'react-redux';\nimport { chatSelectors } from '../../redux/chat';\nimport { Userstate } from 'tmi.js';\nimport { ChatEntry, ChatEntryType } from '../../redux/chat/chat.types';\nimport ChatMessage from '../ChatMessage/ChatMessage';\n\ntype Props = {\n    timestamp: Date,\n    username?: string,\n    usercolor?: string,\n    userClassName?: string,\n    message: string | ReactNode,\n    messageColor?: string,\n    messageClassName?: string,\n    className?: string,\n    userstate?: Userstate,\n    subMessages?: ChatEntry[],\n    type?: ChatEntryType,\n}\n\nconst BasicChatEntry = ({\n                            timestamp,\n                            usercolor,\n                            username,\n                            message,\n                            messageClassName,\n                            messageColor,\n                            className,\n                            userClassName,\n                            userstate,\n                            subMessages,\n                            type,\n                        }: Props) => {\n\n    let messageCount = useSelector(chatSelectors.getMessageCount(username));\n\n    return (\n        <div className={'m-2'}>\n            <div className={clsx('chat-message shadow-md flex p-2 rounded-md space-x-2 text-2xl', className)}>\n\n                <div\n                    className={'flex-shrink-0 leading-9 text-sm w-14 text-gray-600'}>{dayjs(timestamp).format('HH:mm:ss')}</div>\n                <div style={{ minWidth: '1.2rem' }}\n                     className={'flex-shrink-0 space-x-1 text-sm h-9 flex items-center content-center text-gray-900'}>\n                    {type === ChatEntryType.chat && messageCount === 1 && (\n\n                        <div\n                            className={'text-gray-900 text-sm inline-block bg-pink-600 flex items-center justify-center rounded-full w-5 text-center h-5'}>\n                            #1\n                        </div>\n\n                    )}\n                    {(userstate && userstate['custom-reward-id']) && (\n                        <div\n                            className={'text-gray-900 text-sm inline-block bg-indigo-900 flex items-center justify-center rounded-full w-5 text-center h-5'}>\n                            R\n                        </div>\n                    )}\n                </div>\n\n\n                <div>\n                <span\n                    style={{ color: usercolor }}\n                    className={clsx(userClassName)}>{username} </span>\n\n                    <span\n                        style={{ color: messageColor }}\n                        className={clsx(\n                            'flex-1',\n                            messageClassName || 'dark:text-gray-300',\n                        )}>{message}</span>\n                </div>\n            </div>\n\n\n            {subMessages && subMessages.map((msg => {\n                return <div className={'ml-4 -mr-2 '}>\n                    <ChatMessage message={msg} />\n                </div>;\n            }))}\n        </div>\n    );\n};\n\nexport default BasicChatEntry;\n","import React, { ReactNode } from 'react';\n\n\nexport const createCheerMessage = (message: ReactNode[]) => {\n    let result = message.map(msg => {\n        if (typeof msg === 'string') {\n\n            let m = msg.match(/([a-zA-Z]*)(\\d+)/);\n        }\n        return msg;\n    });\n\n\n    return message;\n};\n\nexport const createEmoteMessage = (message: string, emotes: { [emoteid: string]: string[] } | undefined) => {\n    if (!emotes)\n        return [message];\n\n\n    let msgArray: ReactNode[] = [];\n\n\n    const replacements: { stringToReplace: string, replacement: ReactNode, start: number }[] = [];\n\n    Object.entries(emotes || [])\n        .forEach(([emoteId, positions]) => {\n            Object.values(positions as any)\n                .forEach((position, index) => {\n                    let [start, end] = (position as string).split('-');\n\n                    replacements.push({\n                        start: parseInt(start),\n                        stringToReplace: message.substring(parseInt(start), parseInt(end) + 1),\n                        replacement: <img style={{ display: 'inline', width: '1.1em' }}\n                                          key={`emote-${emoteId}-${index}`}\n                                          src={`https://static-cdn.jtvnw.net/emoticons/v2/${emoteId}/default/dark/2.0`} />,\n                    });\n                });\n        });\n\n    let tmpMsg = message;\n    replacements\n        .sort((a, b) => a.start - b.start)\n        .forEach(({ stringToReplace, replacement }) => {\n            if (tmpMsg) {\n                let splitted = tmpMsg.split(stringToReplace);\n                msgArray.push(splitted[0]);\n                msgArray.push(replacement);\n                tmpMsg = tmpMsg.replace(splitted[0], '').replace(stringToReplace, '');\n            }\n        });\n    msgArray.push(tmpMsg);\n\n    return msgArray;\n};\n","import {ReactNode} from \"react\";\n\n\nexport const createLinks = (message: ReactNode[]) => {\n    return message.map(msg => {\n        if (typeof msg === 'string') {\n            const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\n            return msg\n                .split(\" \")\n                .map(part => URL_REGEX.test(part) ?\n                    <a className={'text-pink-300'}\n                       key={part}\n                       target={'_blank'} href={part}>{part} </a> : part + \" \"\n                );\n        }\n        return msg;\n    })\n\n}\n","import React from 'react';\nimport './ChatMessage.less';\nimport { getColor, isDark } from '../../helper/ColorHelper';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\nimport { createEmoteMessage } from '../../helper/EmoteHelper';\nimport { createLinks } from '../../helper/LinkHelper';\nimport clsx from 'clsx';\n\nconst ChatMessage = ({ message }: { message: ChatEntry }) => {\n\n    const randomUserColor = getColor(message.userstate['display-name'] || String(Math.random()));\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        type={message.type}\n                        className={'bg-gray-900'}\n                        userstate={message.userstate}\n                        username={message.userstate['display-name']}\n                        usercolor={message.userstate.color ? isDark(message.userstate.color) ? randomUserColor : message.userstate.color : null || randomUserColor}\n                        message={createLinks(createEmoteMessage(message.message, message.userstate.emotes))}\n                        subMessages={message.subMessages}\n                        messageClassName={clsx([\n                            message.deleted && 'text-gray-600',\n                            message.userstate['message-type'] === 'action' && 'italic',\n\n                        ])}\n\n        />\n    );\n};\n\nexport default ChatMessage;\n","import React from 'react';\nimport './CheerMessage.less';\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage, createCheerMessage} from \"../../helper/EmoteHelper\";\n\nconst CheerMessage = ({message}: { message: ChatEntry }) => {\n    return (\n\n        <BasicChatEntry timestamp={message.timestamp}\n                        type={message.type}\n                        className={'bg-blue-800 bg-opacity-70'}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={`${message.userstate[\"display-name\"]} hat ${message.userstate.bits} Bits gecheered`}\n                        message={createCheerMessage(createEmoteMessage(message.message, message.userstate.emotes))}/>\n    );\n};\n\nexport default CheerMessage;\n","export default __webpack_public_path__ + \"static/media/CheerMessage.bdb9e4c5.less\";","import React from 'react';\nimport './RaidMessage.less';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport { getColor } from '../../helper/ColorHelper';\nimport { createEmoteMessage } from '../../helper/EmoteHelper';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\n\nconst RaidMessage = ({ message }: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-yellow-700'}\n                        type={message.type}\n                        userClassName={'dark:text-gray-900'}\n                        username={message.userstate['display-name']}\n                        messageClassName={'dark:text-gray-900'}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)} />\n    );\n};\n\nexport default RaidMessage;\n","export default __webpack_public_path__ + \"static/media/RaidMessage.8835538a.less\";","import React from 'react';\nimport './SubMessage.less';\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage} from \"../../helper/EmoteHelper\";\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\n\nconst SubMessage = ({message}: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-purple-900 bg-opacity-70'}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={`${message.userstate[\"display-name\"]} hat ein Abo (${message.userstate['msg-param-sub-plan']}) im ${message.userstate['msg-param-cumulative-months']}. Monat abgeschlossen: `}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)}/>\n    );\n};\n\nexport default SubMessage;\n","export default __webpack_public_path__ + \"static/media/SubMessage.10a37b26.less\";","import React from 'react';\nimport './SubGiftMessage.less';\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage} from \"../../helper/EmoteHelper\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\n\nconst SubGiftMessage = ({message}: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-purple-800 bg-opacity-70'}\n                        type={message.type}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={message.userstate['display-name']}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)}/>\n    );\n};\n\nexport default SubGiftMessage;\n","export default __webpack_public_path__ + \"static/media/SubGiftMessage.3607588c.less\";","import React, { useEffect } from 'react';\nimport './Chat.less';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chatActions, chatSelectors } from '../../redux/chat';\nimport ChatMessage from '../../components/ChatMessage/ChatMessage';\nimport { ChatEntryType } from '../../redux/chat/chat.types';\nimport CheerMessage from '../../components/CheerMessage/CheerMessage';\nimport RaidMessage from '../../components/RaidMessage/RaidMessage';\nimport SubMessage from '../../components/SubMessage/SubMessage';\nimport SubGiftMessage from '../../components/SubGiftMessage/SubGiftMessage';\nimport { useLocation } from 'react-router-dom';\nimport qs from 'query-string';\nimport DropDownMenu from '../../components/DropDownMenu/DropDownMenu';\nimport ChatMessageAdminMenu from './ChatMessageAdminMenu';\n\n\nconst Chat = ({}) => {\n\n    const dispatch = useDispatch();\n    const messages = useSelector(chatSelectors.getMessages);\n\n    const location = useLocation();\n    const searchParams = qs.parse(location.search);\n    console.log('loc', searchParams);\n\n    useEffect(() => {\n        if (searchParams.channel) {\n            dispatch(chatActions.selectChannel(searchParams.channel as string));\n        }\n    }, [searchParams.channel]);\n\n    return (\n        <div className='chat bg-gray '>\n            {\n                messages\n                    .filter(msg => {\n                        if(!msg.message || msg.message.length === 0)\n                            return true;\n\n                        let length = msg.message.length;\n                        let words = msg.message.split(' ').length;\n                        let noteCount = msg.message.match(/([a-zA-Z]+\\W*\\d+)/g);\n                        let wordLengthRatio = words / length;\n\n                        if (msg.type !== ChatEntryType.chat) {\n                            return true;\n                        }\n\n                        if (msg.message.length === 1) {\n                            return false;\n                        } else if (msg.message.startsWith('!bandit')) {\n                            return false;\n                        } else if (msg.message.startsWith('!marble')) {\n                            return false;\n                        } else if (msg.message.startsWith('!song')) {\n                            return false;\n                        } else if (msg.message.indexOf('https://www.thingiverse.com') > -1) {\n\n                        } else if (msg.userstate.username === 'projektionbot') {\n                            return false;\n                        } else if (msg.userstate.username === 'streamelements') {\n                            return false;\n                        } else if (msg.userstate.username === 'sascha_lbot') {\n                            return false;\n                        } else if (msg.message.match(/~\\d+/)) {\n                            return false;\n                        } else if ((noteCount || []).length > 10 && wordLengthRatio > 0.1) {\n                            return false;\n                        }\n                        return true;\n                    })\n                    .map((msg, index) => {\n                        switch (msg.type) {\n                            case ChatEntryType.cheer:\n                                return <CheerMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.raid:\n                                return <RaidMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.sub:\n                                return <SubMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.subgift:\n                                return <SubGiftMessage key={msg.userstate['id']} message={msg} />;\n                        }\n\n\n                        return <div className={'w-full flex flex-1'}>\n                            <div className={'flex-1 -my-1'}>\n                                <ChatMessage\n                                    key={msg.userstate['id']} message={msg} />\n                            </div>\n                            {/*TODO: add later -> check if mod / admin first*/}\n                            {/*<div className={''}>*/}\n                            {/*    <ChatMessageAdminMenu message={msg}/>*/}\n                            {/*</div>*/}\n                        </div>;\n\n                    })\n            }\n        </div>\n    );\n};\n\nexport default Chat;\n","import { createAction } from '@reduxjs/toolkit';\n\n\nexport const processToken = createAction<string, 'login/token'>('login/token');\nexport const logout = createAction('login/logout');\n\n\nexport default {\n    processToken,\n    logout,\n};\n","import { AuthStateType } from './auth.types';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth.actions';\n\n\nconst initialState: AuthStateType = {};\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(authActions.processToken, (state, action) => {\n            return {\n                ...state,\n                token: action.payload,\n            }\n        })\n        .addCase(authActions.logout, (state, action) => {\n            return initialState;\n        })\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {AuthStateType} from \"./auth.types\";\n\nconst getSubState = (state: any) => state.auth as AuthStateType;\n\n\nconst getToken = createSelector(getSubState, state => state.token);\nconst isLoggedIn = createSelector(getSubState, state => !!state.token);\n\n\nexport default {\n    isLoggedIn,\n    getToken\n};\n","import authReducer from './auth.reducer'\n\nexport {default as authActions} from './auth.actions'\nexport {default as authSelectors} from './auth.selectors'\n\n\nexport default authReducer;\n","import {createAction} from \"@reduxjs/toolkit\";\nimport {TwitchStreamInfo, TwitchUserInfo} from \"./twitch.types\";\n\n\n// export const tokenReceveived = createAction<TokenLoginActionPayload, typeof LoginActionTypes[\"login/token\"]>(LoginActionTypes[\"login/token\"])\n\n\nexport const userInfoReceived = createAction<TwitchUserInfo, 'twitch/userinfo'>('twitch/userinfo')\nexport const streamInfoReceived = createAction<TwitchStreamInfo, 'twitch/streaminfo'>('twitch/streaminfo');\n\nexport const getFollowedStreams = createAction<undefined, 'twitch/followedStreams'>('twitch/followedStreams');\nexport const followedStreamsReceived = createAction<TwitchStreamInfo[], 'twitch/followedStreams'>('twitch/followedStreams');\n\n\n\nexport default {\n    userInfoReceived,\n    streamInfoReceived,\n    getFollowedStreams,\n    followedStreamsReceived\n};\n","import {AnyAction} from \"redux\";\nimport {TwitchStateType} from \"./twitch.types\";\nimport {createReducer} from \"@reduxjs/toolkit\";\nimport {userInfoReceived, streamInfoReceived} from \"./twitch.actions\";\nimport {logout} from \"../auth/auth.actions\";\n\n\nconst initialState: TwitchStateType = {\n    user: undefined,\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(userInfoReceived, (state, action) => {\n            return {\n                ...state,\n                user: action.payload,\n            }\n        })\n        .addCase(streamInfoReceived, (state, action) => {\n            return {\n                ...state,\n                streamInfo: action.payload,\n            }\n        })\n        .addCase(logout, (state, action) => {\n            return initialState;\n        })\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {TwitchStateType} from \"./twitch.types\";\n\nconst getSubState = (state: any) => state.twitch as TwitchStateType;\n\nconst getUser = createSelector(getSubState, state => state.user);\n\nconst getUserId = createSelector(getUser, user => user?.id);\n\nconst getStreamInfo = createSelector(getSubState, state => state.streamInfo);\n\n\nexport default {\n    getUser,\n    getUserId,\n    getStreamInfo,\n};\n","import twitchReducer from './twitch.reducer'\n\nexport {default as twitchActions} from './twitch.actions'\nexport {default as twitchSelectors} from './twitch.selectors'\n\n\nexport default twitchReducer;\n","import dotenv from 'dotenv';\ndotenv.config();\n\nconst CONFIG = {\n    TWITCH_CLIENT_ID: '1lk526oh4rsbzwcqowmcuc4m9agza3',\n}\n\nexport default CONFIG;\n","import { call, cancel, delay, fork, put, race, select, take, takeLatest } from 'redux-saga/effects';\nimport tmi, { DeleteUserstate, SubGiftUserstate, SubMethods, SubMysteryGiftUserstate, SubUserstate } from 'tmi.js';\nimport { eventChannel, Task } from 'redux-saga';\nimport chatActions, { chatMessage, chatMessageDeleted } from './chat.actions';\nimport { ChatEntry, ChatEntryType, DeleteMessageActionPayload, TimeoutActionPayload } from './chat.types';\nimport { chatSelectors } from './index';\nimport { authActions } from '../auth';\nimport { TwitchUserInfo } from '../twitch/twitch.types';\nimport { twitchActions } from '../twitch';\nimport { Action } from 'redux';\nimport CONFIG from '../../config';\n\n\nfunction* init(client: tmi.Client) {\n    console.log('INIT!');\n    // @ts-ignore\n    const chatChannel: any = yield call(createTmiChannel, client);\n    while (true) {\n\n        console.log('waiting for race...');\n        // const {event, close} = yield race({\n        //     event: take(chatChannel),\n        //     close: take(chatActions.selectChannel.type),\n        // })\n        // const event : ChatEntry = yield take(chatChannel);\n\n        // console.log(\"race\", event, close)\n\n        const event: PayloadAction<'message', ChatEntry> = yield take(chatChannel);\n\n\n        yield put(event);\n    }\n}\n\nfunction createTmiChannel(client: tmi.Client): any {\n    return eventChannel((emit) => {\n\n        client.on('connected', async (e) => {\n            console.log('Connected!');\n        });\n\n        client.on('chat', (channel, userstate: tmi.ChatUserstate, message, self) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.chat,\n                timestamp: new Date(),\n                message,\n                userstate,\n            }));\n        });\n\n\n        client.on('cheer', (channel, userstate: tmi.ChatUserstate, message) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.cheer,\n                timestamp: new Date(),\n                message,\n                userstate,\n            }));\n        });\n\n        client.on('subscription', (channel: string, username: string, methods: SubMethods, message: string, userstate: SubUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.sub,\n                timestamp: new Date(),\n                message: message,\n                userstate,\n            }));\n        });\n\n        client.on('resub', (channel: string, username: string, months: number, message: string, userstate: SubUserstate, methods: SubMethods) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.sub,\n                timestamp: new Date(),\n                message: message,\n                userstate,\n            }));\n        });\n\n\n        client.on('submysterygift', (channel: string, username: string, numbOfSubs: number, methods: SubMethods, userstate: SubMysteryGiftUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.subgift,\n                timestamp: new Date(),\n                message: `hat ${numbOfSubs} Subs verschenkt!`,\n                userstate,\n            }));\n        });\n\n\n        client.on('subgift', (channel: string, username: string, streakMonths: number, recipient: string, methods: SubMethods, userstate: SubGiftUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.subgift,\n                timestamp: new Date(),\n                message: `hat ein Abo an ${recipient} verschenkt!`,\n                userstate,\n            }));\n        });\n\n        client.on('messagedeleted', (channel: string, username: string, deletedMessage: string, userstate: DeleteUserstate) => {\n            emit(chatMessageDeleted({\n                channel: channel,\n                username: username,\n                deletedMessage: deletedMessage,\n                messageId: userstate['target-msg-id'],\n            }));\n        })\n\n        client.on('action', (channel, userstate: tmi.ChatUserstate, message, self) => {\n            console.log('msg', channel, userstate, message, self);\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.action,\n                userstate,\n                message,\n                timestamp: new Date(),\n            }));\n        });\n\n        client.on('raided', (channel: string, username: string, viewers: number) => {\n            emit(chatMessage({\n                type: ChatEntryType.raid,\n                message: `raidet mit ${viewers} Personen!`,\n                userstate: {\n                    'display-name': username,\n                },\n                timestamp: new Date(),\n            }));\n        });\n\n        setTimeout(() => {\n            // emit(chatMessage({\n            //     type: ChatEntryType.cheer,\n            //     timestamp: new Date(),\n            //     message: \"yolo Cheer100\",\n            //     userstate: {\n            //         \"display-name\": \"sixi\",\n            //         bits: 200,\n            //     },\n            // }));\n            //\n            // emit(chatMessage({\n            //     type: ChatEntryType.sub,\n            //     timestamp: new Date(),\n            //     message: `${\"Nachricht\"}`,\n            //     userstate: {\n            //         \"display-name\": 'sixi',\n            //         \"msg-param-sub-plan-name\": 'Tier 1',\n            //         'msg-param-sub-plan': 'Prime',\n            //         'msg-param-cumulative-months': '3',\n            //     },\n            // }))\n            // emit(chatMessage({\n            //     type: ChatEntryType.raid,\n            //     message: `raidet mit 22 Personen!`,\n            //     userstate: {\n            //         \"display-name\": 'sixi',\n            //     },\n            //     timestamp: new Date(),\n            // }));\n        }, 1000);\n\n        return async () => {\n            console.log('Client unsubscribe');\n            await client.disconnect();\n        };\n    });\n}\n\n\nlet client: (tmi.Client | undefined) = undefined;\n\nfunction* createClient(channel: string, userId?: string, token?: string) { //\n    console.log('Create Client...', channel, userId, token);\n\n    if (!client) {\n        client = tmi.client({\n            options: {\n                debug: true,\n                messagesLogLevel: 'info',\n                clientId: CONFIG.TWITCH_CLIENT_ID,\n            },\n            connection: {\n                secure: true,\n                reconnect: true,\n\n            },\n            identity: {\n                username: userId,\n                password: token && `oauth:${token}`,\n            },\n            channels: [channel],\n        });\n        yield client.connect();\n\n\n        yield put(chatActions.channelJoined(channel));\n        yield fork(init, client);\n\n        yield delay(1000);\n        // if(channel === 'realsixi'){\n        //     // yield client.say('#'+channel, \"Moin!\");\n        //     // yield client.ban(channel, \"nightbot\", \"test\");\n        //     // client.tim\n        // }\n    } else {\n        let channelName: string = yield select(chatSelectors.getChannelName);\n        try {\n            yield client.part(channelName);\n        } catch (e) {\n\n        }\n        try {\n            yield client.join(channel);\n            yield put(chatActions.channelJoined(channel));\n            yield fork(init, client);\n        } catch (e) {\n\n        }\n    }\n\n    return () => {\n        console.log(\"Create Client - Canceled\")\n    }\n}\n\nfunction* deleteMessage({payload: {msgId}} : PayloadAction<string, DeleteMessageActionPayload>){\n    const channelName: string = yield select(chatSelectors.getChannelName);\n    if(client){\n        try{\n            yield client.deletemessage(channelName, msgId);\n        } catch(e){\n            console.log(e);\n        }\n    }\n}\n\nfunction* timeoutUser({payload: {duration, reason, username}} : PayloadAction<string, TimeoutActionPayload>){\n    const channelName: string = yield select(chatSelectors.getChannelName);\n    if(client){\n        try{\n            yield client.timeout(channelName, username, duration, reason);\n        } catch(e){\n            console.log(e);\n        }\n    }\n}\n\n\n\nexport default function* chatSaga() {\n    console.log('init chat!');\n\n    yield takeLatest(chatActions.deleteMessage.type, deleteMessage)\n    yield takeLatest(chatActions.timeoutUser.type, timeoutUser)\n\n    let channel = undefined;\n    let token = undefined;\n    let user = undefined;\n\n    let chatTask: (Task | undefined) = undefined;\n\n    while (true) {\n        let {\n            selectChannel,\n            userInfoReceived,\n            tokenReceived,\n        }: { selectChannel: PayloadAction<string, string>, userInfoReceived: PayloadAction<string, TwitchUserInfo>, tokenReceived: PayloadAction<string, string> } = yield race({\n            selectChannel: take(chatActions.selectChannel.type),\n            userInfoReceived: take(twitchActions.userInfoReceived.type),\n            tokenReceived: take(authActions.processToken.type),\n        });\n\n        if (tokenReceived) {\n            token = tokenReceived.payload;\n        } else if (selectChannel) {\n            channel = selectChannel.payload;\n        } else if (userInfoReceived) {\n            user = userInfoReceived.payload;\n        }\n\n        console.log(\"Race Completed\");\n\n        if(chatTask){\n            yield cancel(chatTask);\n        }\n\n        if (channel) {\n            chatTask = yield fork(createClient, channel, user?.login, token);\n        }\n\n    }\n\n\n    // let {payload} = yield take(chatActions.selectChannel.type);\n    // yield call(createClient, payload)\n}\n","import { takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { authActions } from './index';\n\n\nfunction* tokenReceived({payload : token}: PayloadAction<string, string>) {\n    console.log(\"Saga -> \", token)\n\n    let {data} = yield axios.get('https://id.twitch.tv/oauth2/userinfo',{\n        headers: {\n            'Authorization': `Bearer ${token}`,\n\n        }\n    })\n\n    console.log(\"Userinfo\", data)\n\n}\n\nexport default function* authSaga() {\n    console.log(\"INIT auth\");\n\n\n    yield takeLatest(authActions.processToken.type, tokenReceived)\n\n}\n","import { delay, put, select, takeLatest } from 'redux-saga/effects';\nimport { twitchActions, twitchSelectors } from './index';\nimport { authActions, authSelectors } from '../auth';\nimport axios from 'axios';\nimport { followedStreamsReceived, streamInfoReceived } from './twitch.actions';\nimport { chatActions, chatSelectors } from '../chat';\nimport CONFIG from '../../config';\n\n\nfunction* getUserInfo() {\n    let token: string = yield select(authSelectors.getToken);\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/users`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n\n    });\n\n    yield put(twitchActions.userInfoReceived(data.data[0]));\n}\n\nfunction* getBroadcasterId(channelName: string) {\n\n    let token: string = yield select(authSelectors.getToken);\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/users`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n        params: {\n            login: channelName,\n        },\n    });\n    console.log('GetUser', data);\n    if (data.data[0])\n        return data.data[0].id as string;\n    throw new Error('channel not found');\n}\n\n\nfunction* getChannelInfo() {\n    let isLoggedIn: boolean = yield select(authSelectors.isLoggedIn);\n    if (isLoggedIn) {\n\n        const channelName: string = yield select(chatSelectors.getChannelName);\n        const broadcasterId: string = yield getBroadcasterId(channelName);\n        let token: string = yield select(authSelectors.getToken);\n        while (true) {\n\n            let { data } = yield axios.get(`https://api.twitch.tv/helix/streams`, {\n                headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n                },\n                params: {\n                    user_id: broadcasterId,\n                },\n            });\n\n            console.log('streamInfo', data);\n\n            yield put(streamInfoReceived(data.data[0]));\n\n            yield delay(30000);\n\n        }\n    }\n\n}\n\nfunction* requestFollowedStreams() {\n    let userId: string = yield select(twitchSelectors.getUserId);\n    let token: string = yield select(authSelectors.getToken);\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/streams/followed`,\n        {\n            params: {\n                'user_id': userId,\n            },\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n            },\n        });\n\n    yield put(followedStreamsReceived(data.data));\n}\n\nexport default function* twitchSaga() {\n    console.log('Twitch Saga Ready');\n    yield takeLatest(authActions.processToken.type, getUserInfo);\n    yield takeLatest(chatActions.channelJoined.type, getChannelInfo);\n    yield takeLatest(twitchActions.getFollowedStreams.type, requestFollowedStreams);\n}\n","import chatSaga from \"./chat/chat.saga\";\nimport authSaga from './auth/auth.saga'\nimport {spawn} from 'redux-saga/effects'\nimport twitchSaga from \"./twitch/twitch.saga\";\n\n\n\nexport default function* rootSaga() {\n    console.log(\"Saga Init done\");\n\n    yield spawn(chatSaga);\n    yield spawn(authSaga);\n    yield spawn(twitchSaga);\n}\n","import {combineReducers} from \"redux\";\nimport chatReducer from './chat'\nimport authReducer from './auth'\nimport twitchReducer from './twitch'\nimport {connectRouter} from \"connected-react-router\";\n\n\n\n\n\nconst createRootReducer = (history : any ) => {\n    const rootReducer = combineReducers({\n        chat: chatReducer,\n        auth: authReducer,\n        router: connectRouter(history),\n        twitch: twitchReducer,\n    })\n    return rootReducer;\n}\n\nexport default createRootReducer\n","import {createStore, applyMiddleware} from \"redux\";\nimport createSagaMiddleware from 'redux-saga'\nimport logger from 'redux-logger'\nimport rootSaga from \"./saga\";\nimport { createBrowserHistory } from 'history';\n\nimport { routerMiddleware } from 'connected-react-router'\nimport createRootReducer from \"./reducers\";\n\n\nexport const history = createBrowserHistory()\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = createRootReducer(history);\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware, routerMiddleware(history), logger));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import { ReactNode } from 'react';\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\n\n// @ts-ignore\nimport { AuthorizationCodeCallback, RequestAuthorizationCode } from 'react-oauth2-auth-code-flow';\nimport { push } from 'connected-react-router';\nimport { useDispatch } from 'react-redux';\nimport qs from 'query-string';\nimport { authActions } from '../../redux/auth';\n\n\nconst LoginCallback = () => {\n    const location = useLocation();\n\n    console.log('loc', location.hash);\n    const hashParams = qs.parse(location.hash);\n\n    console.log('SearchParams', hashParams);\n\n    const dispatch = useDispatch();\n\n    dispatch(authActions.processToken( (hashParams.access_token || hashParams.id_token) as string ));\n\n    dispatch(push('/'));\n\n    return null;\n};\n\nconst AuthHandler = ({ children }: { children: ReactNode }) => {\n\n    const dispatch = useDispatch();\n\n    const domain = 'id.twitch.tv/oauth2'; //process.env.REACT_APP_AUTH0_DOMAIN;\n    const clientId = '1lk526oh4rsbzwcqowmcuc4m9agza3'; //process.env.REACT_APP_AUTH0_CLIENT_ID;\n\n    const history = useHistory();\n\n\n    const onRedirectCallback = (appState: any) => {\n        history.push(appState?.returnTo || window.location.pathname);\n    };\n\n    return (\n        <Switch>\n            <Route path={'/login/callback'}>\n                <LoginCallback />\n            </Route>\n            {children}\n        </Switch>\n    );\n};\n\nexport default AuthHandler;\n","import React from 'react';\nimport './UserInfo.less';\nimport {TwitchUserInfo} from \"../../../redux/twitch/twitch.types\";\nimport DropDownMenu from \"../../DropDownMenu/DropDownMenu\";\n\nconst UserInfo = ({user} : {user: TwitchUserInfo}) => {\n    return (\n        <div className='user-info flex items-center space-x-2'>\n            <img className={'h-7 rounded-full'} src={user.profile_image_url}/>\n\n\n        </div>\n    );\n};\n\nexport default UserInfo;\n","export default __webpack_public_path__ + \"static/media/BaseScreen.b98d935f.less\";","export default __webpack_public_path__ + \"static/media/MainMenu.910eb3e9.less\";","export default __webpack_public_path__ + \"static/media/UserInfo.58018877.less\";","export default __webpack_public_path__ + \"static/media/DropDownMenu.5e0322c8.less\";","import React, {Fragment, ReactNode} from 'react';\nimport './DropDownMenu.less';\nimport {Disclosure, Menu, Transition} from '@headlessui/react'\nimport {BellIcon, MenuIcon, XIcon} from '@heroicons/react/outline'\nimport clsx from \"clsx\";\n\ntype Props = {\n    buttonComponent: ReactNode,\n    items: (MenuItem | false)[],\n    origin?: \"origin-top-right\" | 'origin-top-left' | 'origin-bottom-left' | 'origin-bottom-right',\n    className?: string,\n}\n\ntype MenuItem = {\n    title: string,\n    onClick: () => (void),\n\n}\n// type Origin {\n//     TopRight: \"origin-top-right\",\n//     TopLeft: \"origin-top-left\",\n// }\n\nconst DropDownMenu = ({buttonComponent, items, origin = 'origin-bottom-right', className}: Props) => {\n    return (\n        <div className={clsx('drop-down-menu z-50', className)}>\n            <Menu as=\"div\" className=\"relative z-50\">\n                <div>\n                    <Menu.Button\n                        className=\"bg-gray-800 flex text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                        <span className=\"sr-only\">Open user menu</span>\n                        {buttonComponent}\n                    </Menu.Button>\n                </div>\n                <Transition\n                    as={Fragment}\n                    enter=\"transition ease-out duration-100\"\n                    enterFrom=\"transform opacity-0 scale-95\"\n                    enterTo=\"transform opacity-100 scale-100\"\n                    leave=\"transition ease-in duration-75\"\n                    leaveFrom=\"transform opacity-100 scale-100\"\n                    leaveTo=\"transform opacity-0 scale-95\"\n                >\n                    <Menu.Items\n                        className={clsx(\n                            origin,\n                            origin === 'origin-top-left' && 'right-0',\n                            'absolute mt-2 w-48 z-50 rounded-md shadow-lg py-1 cursor-pointer\\t bg-white ring-1 ring-black ring-opacity-5 focus:outline-none')}>\n                        {items\n                            .filter(a => a)\n                            .map(a => a as MenuItem)\n                            .map((item, index) => {\n                            return <Menu.Item  key={`menu-item=${index}`}>\n                                {({active}) => (\n                                    <a\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            item.onClick();\n                                        }}\n                                        className={clsx(active ? 'bg-gray-100' : '', 'cursor-pointer block px-4 py-2 text-sm text-gray-700')}\n                                    >\n                                        {item.title}\n                                    </a>\n                                )}\n                            </Menu.Item>\n                        })}\n                    </Menu.Items>\n                </Transition>\n            </Menu>\n        </div>\n    );\n};\n\nexport default DropDownMenu;\n","import React, { useState } from 'react';\nimport './ChatInput.less';\nimport { ArrowCircleRightIcon, CheckCircleIcon } from '@heroicons/react/outline';\nimport clsx from 'clsx';\n\ninterface Props {\n    currentChannel?: string,\n    onSubmit?: (channel: string) => (void),\n    className?: string,\n}\n\nconst ChatInput = ({ currentChannel, onSubmit, className }: Props) => {\n\n    const [value, setValue] = useState('');\n\n    return (\n        <div className={clsx('chat-input items-center flex space-x-1', className)}>\n            <input\n                className={'bg-white text-black border-0 rounded-full h-7 px-4'}\n                value={value}\n                placeholder={currentChannel}\n                onKeyDown={e => {\n                    if (e.key === 'Enter') {\n                        if (onSubmit)\n                            onSubmit(value);\n                    }\n                }}\n                onChange={e => {\n                    setValue(e.target.value);\n                }}\n\n            />\n\n            {value.length === 0 || value === currentChannel ? (\n                <CheckCircleIcon className={'w-8 '} />\n            ) : (\n                <ArrowCircleRightIcon\n                    onClick={() => {\n                        if (onSubmit && value && value.length > 0)\n                            onSubmit(value);\n                    }}\n                    className={'w-8 cursor-pointer'} />\n            )}\n\n\n        </div>\n    );\n};\n\nexport default ChatInput;\n","export default __webpack_public_path__ + \"static/media/ChatInput.b6cbfb07.less\";","import React from 'react';\nimport './MainMenu.less';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authActions, authSelectors } from '../../../redux/auth';\nimport { twitchSelectors } from '../../../redux/twitch';\nimport UserInfo from '../../../components/Menu/UserInfo/UserInfo';\nimport DropDownMenu from '../../../components/DropDownMenu/DropDownMenu';\nimport { push } from 'connected-react-router';\nimport { MenuIcon } from '@heroicons/react/outline';\nimport ChatInput from '../../../components/ChatInput/ChatInput';\nimport { chatActions, chatSelectors } from '../../../redux/chat';\nimport CONFIG from '../../../config';\n\nconst MainMenu = ({}) => {\n\n        const isLoggedIn = useSelector(authSelectors.isLoggedIn);\n        const user = useSelector(twitchSelectors.getUser);\n\n        const streamInfo = useSelector(twitchSelectors.getStreamInfo);\n\n        const currentChannel = useSelector(chatSelectors.getChannelName);\n\n        const dispatch = useDispatch();\n\n        return (\n            <menu className={'text-white bg-indigo-900 flex flex-row h-12 space-x-2 items-center p-2 fixed w-full top-0'}>\n\n\n                <DropDownMenu\n                    origin={'origin-top-right'}\n                    buttonComponent={<MenuIcon\n                        className={'bg-gray-800 hover:bg-indigo-500 transition rounded-full p-1 w-8'} />}\n                    items={[\n                        {\n                            title: 'Chat',\n                            onClick: () => {\n                                dispatch(push('/'));\n                            },\n                        },\n                        isLoggedIn && {\n                            title: 'Kanäle',\n                            onClick: () => {\n                                dispatch(push('/channels'));\n                            },\n                        },\n\n                    ].filter((a => a))}\n                />\n\n\n                {!isLoggedIn && (\n                    <div className={'text-white'}>\n                        <a href={`https://id.twitch.tv/oauth2/authorize?client_id=${CONFIG.TWITCH_CLIENT_ID}&redirect_uri=${window.location.origin}/login/callback&force_verify=false&response_type=token&scope=${encodeURIComponent('chat:edit chat:read channel:moderate')}&claims=sub,exp`}>Anmelden</a>\n                    </div>\n                )}\n\n                <ChatInput\n                    onSubmit={(channel) => {\n                        dispatch(chatActions.selectChannel(channel));\n                    }}\n                    currentChannel={currentChannel} />\n\n                <div className={'flex flex-1 flex-shrink flex flex-row truncate'}>\n                    {streamInfo && (\n\n                            <div className={'stream-info flex flex-1 items-center flex-shrink space-x-4 truncate'}>\n                                <div\n                                    className={'bg-purple-500 text-sm rounded-full items-center justify-center flex-shrink-0 flex p-1 px-2'}>\n                                    {streamInfo.viewer_count}<span className={'hidden lg:block'}>&nbsp;Zuschauer</span>\n                                </div>\n                                <div className={'flex-shrink truncate'}>{streamInfo.title}</div>\n                            </div>\n\n\n                    )}\n                </div>\n\n\n                <div className={'flex-shrink-0  flex self-align-end'}>\n                    {user && (\n                        <DropDownMenu\n                            origin={'origin-top-left'}\n                            items={[\n                                {\n                                    title: 'Einstellungen',\n                                    onClick: () => {\n                                        dispatch(push('/settings'));\n                                    },\n                                },\n                                {\n                                    title: 'Abmelden',\n                                    onClick: () => {\n                                        dispatch(authActions.logout());\n                                    },\n                                },\n                            ]}\n                            buttonComponent={\n                                <UserInfo user={user} />\n                            } />\n                    )}\n                </div>\n            </menu>\n        );\n    }\n;\n\nexport default MainMenu;\n","import React, {ReactNode} from 'react';\nimport './BaseScreen.less';\nimport MainMenu from \"./MainMenu/MainMenu\";\n\nconst BaseScreen = ({children}: { children: ReactNode }) => {\n\n\n    return (\n        <div className='base-screen'>\n            <MainMenu/>\n            <div className={'content pt-12'}>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default BaseScreen;\n","import React, {useEffect} from 'react';\nimport './ChannelList.less';\nimport {useDispatch} from \"react-redux\";\nimport {twitchActions} from \"../../redux/twitch\";\nimport {getFollowedStreams} from \"../../redux/twitch/twitch.actions\";\n\nconst ChannelList = ({}) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch(twitchActions.getFollowedStreams())\n    },[])\n\n    return (\n        <div className='channel-list'>\n\n        </div>\n    );\n};\n\nexport default ChannelList;\n","export default __webpack_public_path__ + \"static/media/ChannelList.5c6b1372.less\";","import React from 'react';\n\nimport Chat from \"./screens/Chat/Chat\";\nimport {Provider} from \"react-redux\";\nimport store, {history} from \"./redux/store\";\n\nimport {ConnectedRouter} from 'connected-react-router'\nimport AuthHandler from \"./screens/Auth/AuthHandler\";\nimport BaseScreen from \"./screens/BaseScreen/BaseScreen\";\nimport {Route, Switch} from \"react-router-dom\";\nimport ChannelList from \"./screens/ChannelList/ChannelList\";\n\n\nfunction App() {\n    return (\n        <div className=\"App dark:bg-black\">\n            <Provider store={store}>\n                <ConnectedRouter history={history}>\n                    <AuthHandler>\n                        <Switch>\n                            <Route>\n                                <BaseScreen>\n                                    <Switch>\n                                        <Route path={'/channels'}>\n                                            <ChannelList/>\n                                        </Route>\n                                        <Route>\n                                            <Chat/>\n                                        </Route>\n                                    </Switch>\n                                </BaseScreen>\n                            </Route>\n                        </Switch>\n                    </AuthHandler>\n                </ConnectedRouter>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}