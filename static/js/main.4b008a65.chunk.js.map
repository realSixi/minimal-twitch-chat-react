{"version":3,"sources":["screens/Chat/Chat.less","redux/chat/chat.actions.tsx","redux/chat/chat.reducer.tsx","redux/chat/chat.selectors.tsx","redux/chat/index.tsx","components/ChatMessage/ChatMessage.less","helper/ColorHelper.ts","redux/chat/chat.types.ts","components/BasicChatEntry/BasicChatEntry.less","components/BasicChatEntry/BasicChatEntry.tsx","helper/EmoteHelper.tsx","helper/LinkHelper.tsx","components/ChatMessage/ChatMessage.tsx","redux/twitch/twitch.actions.tsx","components/CheerMessage/CheerMessage.less","redux/auth/auth.actions.tsx","redux/twitch/twitch.reducer.tsx","redux/twitch/twitch.selectors.tsx","redux/twitch/index.tsx","components/CheerMessage/CheerMessage.tsx","components/RaidMessage/RaidMessage.tsx","components/RaidMessage/RaidMessage.less","components/SubMessage/SubMessage.tsx","components/SubMessage/SubMessage.less","components/SubGiftMessage/SubGiftMessage.tsx","components/SubGiftMessage/SubGiftMessage.less","components/StatusMessage/StatusMessage.tsx","screens/Chat/Chat.tsx","redux/auth/auth.reducer.tsx","redux/auth/auth.selectors.tsx","redux/auth/index.tsx","config.ts","redux/chat/chat.saga.ts","redux/auth/auth.saga.ts","redux/twitch/twitch.saga.ts","redux/saga.ts","redux/store.ts","redux/reducers.ts","screens/Auth/AuthHandler.tsx","components/Menu/UserInfo/UserInfo.tsx","screens/BaseScreen/BaseScreen.less","screens/BaseScreen/MainMenu/MainMenu.less","components/Menu/UserInfo/UserInfo.less","components/DropDownMenu/DropDownMenu.less","components/DropDownMenu/DropDownMenu.tsx","components/ChatInput/ChatInput.tsx","components/ChatInput/ChatInput.less","screens/BaseScreen/MainMenu/MainMenu.tsx","screens/BaseScreen/BaseScreen.tsx","screens/ChannelList/ChannelList.tsx","screens/ChannelList/ChannelList.less","App.tsx","reportWebVitals.ts","index.tsx"],"names":["selectChannel","createAction","channelJoined","chatMessage","chatMessageDeleted","banUser","timeoutUser","deleteMessage","resetChat","resetMessages","connected","initialState","messages","userMessageCount","reducer","createReducer","builder","addCase","state","action","channelName","payload","name","userstate","found","map","msg","id","subMessages","slice","messageId","deleted","getSubState","chat","getMessages","createSelector","getMessageCount","user","getChannelName","chatReducer","ChatEntryTags","ChatEntryType","getColor","s","hash","str","i","length","charCodeAt","hashCode","chroma","hsl","hex","BasicChatEntry","timestamp","usercolor","username","message","messageClassName","messageColor","className","userClassName","type","tags","clsx","dayjs","format","style","minWidth","includes","first","color","createCheerMessage","customCheerMotes","flatMap","splitted","split","m","match","amount","cheer","foundCheerMote","defaultCheerMotes","find","c","prefix","tiers","sort","a","b","min_bits","t","getCheermoteImageUrl","parseInt","src","images","dark","animated","createEmoteMessage","emotes","msgArray","replacements","Object","entries","forEach","emoteId","positions","values","position","index","start","end","push","stringToReplace","substring","replacement","display","width","tmpMsg","replace","createLinks","URL_REGEX","part","test","target","href","ChatMessage","randomUserColor","String","Math","random","get","userInfoReceived","streamInfoReceived","getFollowedStreams","followedStreamsReceived","cheermotesReceived","processToken","logout","login","undefined","cheermotes","streamInfo","twitch","getUser","getUserId","getStreamInfo","getCheermotes","getCheermote","getCheermoteLevel","bits","cheermote","twitchReducer","CheerMessage","useSelector","twitchSelectors","RaidMessage","SubMessage","SubGiftMessage","StatusMessage","Chat","dispatch","useDispatch","chatSelectors","location","useLocation","searchParams","qs","parse","search","useEffect","channel","chatActions","filter","words","noteCount","wordLengthRatio","startsWith","indexOf","raid","sub","subgift","status","loginProcess","authActions","token","auth","getToken","isLoggedIn","isInLoginProcess","authReducer","dotenv","config","CONFIG","TWITCH_CLIENT_ID","DEBUG","process","init","createClient","handleChannels","resetClient","joinSelectedChannel","createAuthedClient","createAnonymousClient","chatSaga","client","call","createTmiChannel","chatChannel","take","event","select","messageCount","dotprop","set","reward","put","eventChannel","emit","on","e","self","Date","methods","months","numbOfSubs","streakMonths","recipient","deletedMessage","viewers","msgid","substr","toISOString","setTimeout","disconnect","userId","tmi","options","debug","messagesLogLevel","clientId","connection","secure","reconnect","identity","password","channels","fork","delay","connect","msgId","deletemessage","duration","reason","timeout","currentChannel","join","twitchActions","userInfo","takeLatest","tokenReceived","authSaga","axios","headers","data","persistor","flush","window","origin","encodeURIComponent","authSelectors","getUserInfo","getBroadcasterId","getChannelInfo","requestFollowedStreams","twitchSaga","params","Error","broadcasterId","user_id","broadcaster_id","rootSaga","spawn","store","createRootReducer","history","combineReducers","router","connectRouter","persistConfig","key","storage","blacklist","createBrowserHistory","basename","sagaMiddleware","createSagaMiddleware","rootReducer","persistedReducer","persistReducer","createStore","applyMiddleware","routerMiddleware","logger","run","persistStore","LoginCallback","hashParams","access_token","id_token","AuthHandler","children","useHistory","path","UserInfo","profile_image_url","DropDownMenu","buttonComponent","items","as","Button","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","item","Item","active","onClick","preventDefault","title","ChatInput","onSubmit","useState","value","setValue","placeholder","onKeyDown","onChange","MainMenu","viewer_count","BaseScreen","ChannelList","App","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b008a65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Chat.e8afa995.less\";","import { createAction } from '@reduxjs/toolkit';\nimport {\n    BanActionPayload,\n    ChatEntry,\n    ChatMessageDeleted,\n    DeleteMessageActionPayload,\n    TimeoutActionPayload,\n} from './chat.types';\n\nexport const types = {};\n\n\nexport const selectChannel = createAction<string, 'chat/channel'>('chat/channel');\nexport const channelJoined = createAction<string, 'chat/joined'>('chat/joined');\n\nexport const chatMessage = createAction<ChatEntry, 'chat/message'>('chat/message');\n\nexport const chatMessageDeleted = createAction<ChatMessageDeleted, 'chat/message-deleted'>('chat/message-deleted');\n\nexport const banUser = createAction<BanActionPayload, 'chat/ban'>('chat/ban');\nexport const timeoutUser = createAction<TimeoutActionPayload, 'chat/timeout'>('chat/timeout');\nexport const deleteMessage = createAction<DeleteMessageActionPayload, 'chat/delete-message'>('chat/delete-message');\n\n\nexport const resetChat = createAction('chat/reset');\nexport const resetMessages = createAction('chat/reset-messages');\n\n\nexport const connected = createAction('chat/connected');\n\nexport default {\n    resetChat,\n    chatMessage,\n    selectChannel,\n    channelJoined,\n    banUser,\n    timeoutUser,\n    deleteMessage,\n    chatMessageDeleted,\n    resetMessages,\n    connected\n};\n","import {\n    channelJoined,\n    chatMessage,\n    chatMessageDeleted,\n    resetChat,\n    resetMessages,\n    selectChannel,\n} from './chat.actions';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { ChatEntry, ChatEntryType } from './chat.types';\n\n\nexport interface ChatStateType {\n    messages: ChatEntry[],\n    userMessageCount: { [username: string]: number },\n    channelName?: string,\n}\n\nconst initialState: ChatStateType = {\n    messages: [],\n    userMessageCount: {},\n};\n\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(resetMessages, (state, action) => {\n            return {\n                ...initialState,\n                channelName: state.channelName,\n            };\n        })\n        .addCase(resetChat, (state, action) => {\n            return { ...initialState };\n        })\n        .addCase(selectChannel, (state, action) => {\n            return {\n                ...state,\n                messages: [],\n            };\n        })\n        .addCase(channelJoined, (state, action) => {\n            return {\n                ...state,\n                channelName: action.payload,\n            };\n        })\n        .addCase(chatMessage, (state, action) => {\n            console.log('Chat message Case!');\n            const name = action.payload.userstate['display-name'] || 'anonymous';\n\n            if (action.payload.userstate['reply-parent-msg-id']) {\n                let found = false;\n                state.messages = state.messages.map(msg => {\n                    if (msg.id === action.payload.userstate['reply-parent-msg-id']) {\n                        msg.subMessages = [...(msg.subMessages || []), action.payload];\n                        found = true;\n                    }\n                    return msg;\n                });\n\n                if (!found) {\n                    state.messages = [action.payload, ...state.messages.slice(0, 300)];\n                }\n            } else {\n                state.messages = [action.payload, ...state.messages.slice(0, 300)];\n            }\n\n            state.userMessageCount = {\n                ...state.userMessageCount,\n                [name]: (state.userMessageCount[name] || 0) + 1,\n            };\n        })\n        .addCase(chatMessageDeleted, (state, action) => {\n            return {\n                ...state,\n                messages: state.messages.map(msg => {\n                    if (msg.id === action.payload.messageId) {\n                        return {\n                            ...msg,\n                            deleted: true,\n                        };\n                    }\n                    return msg;\n                }),\n            };\n        })\n    ;\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {ChatStateType} from \"./chat.reducer\";\n\nconst getSubState = (state: any) => state.chat as ChatStateType;\n\n\nconst getMessages = createSelector(getSubState, state => state.messages)\n\nconst getMessageCount = (user?: string) => createSelector(getSubState, state => state.userMessageCount[user || 'anonymous'] || 0);\n\n\nconst getChannelName = createSelector(getSubState, state => state.channelName)\n\n\nexport default {\n    getMessages,\n    getMessageCount,\n    getChannelName\n};\n","import chatReducer from './chat.reducer'\n\nexport {default as chatActions} from './chat.actions'\nexport {types as chatTypes} from './chat.actions'\nexport {default as chatSelectors} from './chat.selectors'\n\n\nexport default chatReducer;\n","export default __webpack_public_path__ + \"static/media/ChatMessage.ff8ee5b7.less\";","import chroma from 'chroma-js'\n\nexport function hashCode(str: string) { // java String#hashCode\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    return hash;\n}\n\nexport const getColor = (s : string) => {\n    let hash = hashCode(s);\n    return chroma.hsl(hash % 360, 0.7, 0.7).hex();\n}\n\nexport const isDark = (s: string) => {\n    //console.log(\"check darkgness\", s, chroma(s).get(\"lab.l\"));\n    return chroma(s).get(\"lab.l\") < 30;\n}\n\nexport const invertColor = (s: string) => {\n    return (Number(`0x1${s}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase()\n}\n","import { Userstate } from 'tmi.js';\n\nexport interface ChatEntry {\n    id?: string,\n    timestamp: Date,\n    userstate: Userstate,\n    message: string,\n    type: ChatEntryType,\n    subMessages?: ChatEntry[],\n    deleted?: boolean,\n    tags?: ChatEntryTags[]\n}\n\nexport enum ChatEntryTags {\n    first,\n    reward,\n}\n\nexport interface ChatMessageDeleted {\n    channel: string,\n    username: string,\n    deletedMessage: string,\n    messageId?: string,\n}\n\n\nexport interface BanActionPayload {\n    username: string,\n    reason?: string,\n}\n\n\nexport interface TimeoutActionPayload {\n    username: string,\n    reason?: string,\n    duration?: number,\n}\n\nexport interface DeleteMessageActionPayload {\n    msgId: string,\n}\n\nexport enum ChatEntryType {\n    chat,\n    action,\n    cheer,\n    sub,\n    resub,\n    subgift,\n    submysterygift,\n    anonsubgift,\n    primepaidupgrade,\n    host,\n    raid,\n    status,\n}\n\n\n// interface CheerType {\n//     timestamp: Date,\n//     userstate: ChatUserstate,\n//     message: string,\n// }\n//\n// interface SubscriptionType {\n//     timestamp: Date,\n//     userstate: SubUserstate,\n//     message: string,\n// }\n\n// enum ChatMessageType {}\n\n\n// interface chatStateType {\n//     messages: (ChatMessageType | SubscriptionType | CheerType)[],\n// }\n\n\n","export default __webpack_public_path__ + \"static/media/BasicChatEntry.c4a400d9.less\";","import React, { ReactNode } from 'react';\nimport './BasicChatEntry.less';\nimport dayjs from 'dayjs';\nimport clsx from 'clsx';\nimport { Userstate } from 'tmi.js';\nimport { ChatEntry, ChatEntryTags, ChatEntryType } from '../../redux/chat/chat.types';\nimport ChatMessage from '../ChatMessage/ChatMessage';\n\ntype Props = {\n    timestamp: Date,\n    username?: string,\n    usercolor?: string,\n    userClassName?: string,\n    message: string | ReactNode,\n    messageColor?: string,\n    messageClassName?: string,\n    className?: string,\n    userstate?: Userstate,\n    subMessages?: ChatEntry[],\n    type?: ChatEntryType,\n    tags?: ChatEntryTags[],\n}\n\nconst BasicChatEntry = ({\n                            timestamp,\n                            usercolor,\n                            username,\n                            message,\n                            messageClassName,\n                            messageColor,\n                            className,\n                            userClassName,\n                            userstate,\n                            subMessages,\n                            type,\n                            tags,\n                        }: Props) => {\n\n    // let messageCount = useSelector(chatSelectors.getMessageCount(username));\n\n    return (\n        <div className={'m-2'}>\n            <div className={clsx('chat-message shadow-md flex p-2 rounded-md space-x-2 text-2xl', className)}>\n\n                <div\n                    className={'flex-shrink-0 leading-9 text-sm w-14 text-gray-600'}>{dayjs(timestamp).format('HH:mm:ss')}</div>\n                <div style={{ minWidth: '1.2rem' }}\n                     className={'flex-shrink-0 space-x-1 text-sm h-9 flex items-center content-center text-gray-900'}>\n                    {type === ChatEntryType.chat && tags?.includes(ChatEntryTags.first) && (\n\n                        <div\n                            className={'text-gray-900 text-sm inline-block bg-pink-600 flex items-center justify-center rounded-full w-5 text-center h-5'}>\n                            #1\n                        </div>\n\n                    )}\n                    {(userstate && userstate['custom-reward-id']) && (\n                        <div\n                            className={'text-gray-900 text-sm inline-block bg-indigo-900 flex items-center justify-center rounded-full w-5 text-center h-5'}>\n                            R\n                        </div>\n                    )}\n                </div>\n\n\n                <div>\n                <span\n                    style={{ color: usercolor }}\n                    className={clsx(userClassName)}>{username} </span>\n\n                    <span\n                        style={{ color: messageColor }}\n                        className={clsx(\n                            'flex-1',\n                            messageClassName || 'dark:text-gray-300',\n                        )}>{message}</span>\n                </div>\n            </div>\n\n\n            {subMessages && subMessages.map((msg => {\n                return <div className={'ml-4 -mr-2 '}>\n                    <ChatMessage message={msg} />\n                </div>;\n            }))}\n        </div>\n    );\n};\n\nexport default BasicChatEntry;\n","import React, { ReactNode } from 'react';\nimport { TwitchCheermotes } from '../redux/twitch/twitch.types';\nimport defaultCheerMotes from './cheermotes.json';\n\n\nconst getCheermoteImageUrl = (name: string, amount: number, customCheerMotes: TwitchCheermotes[] | undefined) => {\n    let cheerMotes = defaultCheerMotes as TwitchCheermotes[];\n\n    let foundCheerMote = cheerMotes.find(c => c.prefix === name) || (customCheerMotes || []).find(c => c.prefix === name);\n    if (foundCheerMote) {\n        let tier = foundCheerMote?.tiers\n            .slice()\n            .sort((a, b) => b.min_bits - a.min_bits)\n            .find(t => amount >= t.min_bits);\n        return tier;\n    }\n    return undefined;\n};\n\nexport const createCheerMessage = (message: ReactNode[], customCheerMotes: TwitchCheermotes[] | undefined) => {\n\n    let result = message.flatMap(msg => {\n        if (typeof msg === 'string') {\n            const splitted = msg.split(/([A-Za-z]+\\d+)/g);\n            if (splitted) {\n                let msgArray = splitted.map(m => {\n                    let [_, name, amount] = m.match(/([A-Za-z]+)(\\d+)/) || [];\n                    if (!name || !amount) {\n                        return m;\n                    }\n                    let cheer = getCheermoteImageUrl(name, parseInt(amount), customCheerMotes);\n                    if (cheer) {\n                        return <span style={{ color: cheer.color }}>\n                        {' '}\n                            <img\n                                className={'inline w-8'}\n                                src={cheer.images.dark.animated['2']} />\n                        <span className={'text-sm'}>\n                            {amount}\n                        </span>{' '}\n                    </span>;\n                    }\n                    return m;\n                });\n                return msgArray;\n            }\n        }\n        return msg;\n    });\n\n\n    return result;\n};\n\nexport const createEmoteMessage = (message: string, emotes: { [emoteid: string]: string[] } | undefined) => {\n    if (!emotes)\n        return [message];\n\n\n    let msgArray: ReactNode[] = [];\n\n\n    const replacements: { stringToReplace: string, replacement: ReactNode, start: number }[] = [];\n\n    Object.entries(emotes || [])\n        .forEach(([emoteId, positions]) => {\n            Object.values(positions as any)\n                .forEach((position, index) => {\n                    let [start, end] = (position as string).split('-');\n\n                    replacements.push({\n                        start: parseInt(start),\n                        stringToReplace: message.substring(parseInt(start), parseInt(end) + 1),\n                        replacement: <img style={{ display: 'inline', width: '1.1em' }}\n                                          key={`emote-${emoteId}-${index}`}\n                                          src={`https://static-cdn.jtvnw.net/emoticons/v2/${emoteId}/default/dark/2.0`} />,\n                    });\n                });\n        });\n\n    let tmpMsg = message;\n    replacements\n        .sort((a, b) => a.start - b.start)\n        .forEach(({ stringToReplace, replacement }) => {\n            if (tmpMsg) {\n                let splitted = tmpMsg.split(stringToReplace);\n                msgArray.push(splitted[0]);\n                msgArray.push(replacement);\n                tmpMsg = tmpMsg.replace(splitted[0], '').replace(stringToReplace, '');\n            }\n        });\n    msgArray.push(tmpMsg);\n\n    return msgArray;\n};\n","import {ReactNode} from \"react\";\n\n\nexport const createLinks = (message: ReactNode[]) => {\n    return message.map(msg => {\n        if (typeof msg === 'string') {\n            const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\n            return msg\n                .split(\" \")\n                .map(part => URL_REGEX.test(part) ?\n                    <a className={'text-pink-300'}\n                       key={part}\n                       target={'_blank'} href={part}>{part} </a> : part + \" \"\n                );\n        }\n        return msg;\n    })\n\n}\n","import React from 'react';\nimport './ChatMessage.less';\nimport { getColor, isDark } from '../../helper/ColorHelper';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\nimport { createEmoteMessage } from '../../helper/EmoteHelper';\nimport { createLinks } from '../../helper/LinkHelper';\nimport clsx from 'clsx';\n\nconst ChatMessage = ({ message }: { message: ChatEntry }) => {\n\n    const randomUserColor = getColor(message.userstate['display-name'] || String(Math.random()));\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        type={message.type}\n                        className={'bg-gray-900'}\n                        userstate={message.userstate}\n                        username={message.userstate['display-name']}\n                        usercolor={message.userstate.color ? isDark(message.userstate.color) ? randomUserColor : message.userstate.color : null || randomUserColor}\n                        message={createLinks(createEmoteMessage(message.message, message.userstate.emotes))}\n                        subMessages={message.subMessages}\n                        messageClassName={clsx([\n                            message.deleted && 'text-gray-600',\n                            message.userstate['message-type'] === 'action' && 'italic',\n                        ])}\n                        tags={message.tags}\n\n        />\n    );\n};\n\nexport default ChatMessage;\n","import {createAction} from \"@reduxjs/toolkit\";\nimport { TwitchCheermotes, TwitchStreamInfo, TwitchUserInfo } from './twitch.types';\n\n\n// export const tokenReceveived = createAction<TokenLoginActionPayload, typeof LoginActionTypes[\"login/token\"]>(LoginActionTypes[\"login/token\"])\n\n\nexport const userInfoReceived = createAction<TwitchUserInfo, 'twitch/userinfo'>('twitch/userinfo')\nexport const streamInfoReceived = createAction<TwitchStreamInfo, 'twitch/streaminfo'>('twitch/streaminfo');\n\nexport const getFollowedStreams = createAction<undefined, 'twitch/followedStreams'>('twitch/followedStreams');\nexport const followedStreamsReceived = createAction<TwitchStreamInfo[], 'twitch/followedStreams'>('twitch/followedStreams');\n\nexport const cheermotesReceived = createAction<TwitchCheermotes[], 'twitch/cheermotes'>('twitch/cheermotes')\n\n\n\n\nexport default {\n    userInfoReceived,\n    streamInfoReceived,\n    getFollowedStreams,\n    followedStreamsReceived,\n    cheermotesReceived,\n};\n","export default __webpack_public_path__ + \"static/media/CheerMessage.bdb9e4c5.less\";","import { createAction } from '@reduxjs/toolkit';\n\n\nexport const processToken = createAction<string, 'login/token'>('login/token');\nexport const logout = createAction('login/logout');\n\n\nconst login = createAction('login/login');\n\n\nexport default {\n    processToken,\n    logout,\n    login,\n};\n","import {AnyAction} from \"redux\";\nimport {TwitchStateType} from \"./twitch.types\";\nimport {createReducer} from \"@reduxjs/toolkit\";\nimport { userInfoReceived, streamInfoReceived, cheermotesReceived } from './twitch.actions';\nimport {logout} from \"../auth/auth.actions\";\n\n\nconst initialState: TwitchStateType = {\n    user: undefined,\n    cheermotes: undefined,\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(userInfoReceived, (state, action) => {\n            return {\n                ...state,\n                user: action.payload,\n            }\n        })\n        .addCase(streamInfoReceived, (state, action) => {\n            return {\n                ...state,\n                streamInfo: action.payload,\n            }\n        })\n        .addCase(logout, (state, action) => {\n            return initialState;\n        })\n        .addCase(cheermotesReceived, (state, action)=>{\n            return {\n                ...state,\n                cheermotes: action.payload,\n            }\n        })\n});\n\nexport default reducer;\n","import { createSelector } from 'reselect';\nimport { TwitchStateType } from './twitch.types';\n\nconst getSubState = (state: any) => state.twitch as TwitchStateType;\n\nconst getUser = createSelector(getSubState, state => state.user);\n\nconst getUserId = createSelector(getUser, user => user?.id);\n\nconst getStreamInfo = createSelector(getSubState, state => state.streamInfo);\n\nconst getCheermotes = createSelector(getSubState, state => state.cheermotes);\nconst getCheermote = (prefix: string) => createSelector(getCheermotes, cheermotes => cheermotes?.find(c => c.prefix === prefix));\n\nconst getCheermoteLevel = (prefix: string, bits: number) => createSelector(getCheermote(prefix), cheermote => cheermote?.tiers.find(c => bits >= c.min_bits));\n\n\nexport default {\n    getUser,\n    getUserId,\n    getStreamInfo,\n    getCheermotes,\n    getCheermote,\n    getCheermoteLevel,\n};\n","import twitchReducer from './twitch.reducer'\n\nexport {default as twitchActions} from './twitch.actions'\nexport {default as twitchSelectors} from './twitch.selectors'\n\n\nexport default twitchReducer;\n","import React from 'react';\nimport './CheerMessage.less';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport { getColor } from '../../helper/ColorHelper';\nimport { createCheerMessage, createEmoteMessage } from '../../helper/EmoteHelper';\nimport { useSelector } from 'react-redux';\nimport { twitchSelectors } from '../../redux/twitch';\n\nconst CheerMessage = ({message}: { message: ChatEntry }) => {\n\n    const cheermotes = useSelector(twitchSelectors.getCheermotes);\n    console.log(\"Custom CheerMotes\", cheermotes)\n\n    return (\n\n        <BasicChatEntry timestamp={message.timestamp}\n                        type={message.type}\n                        className={'bg-blue-800 bg-opacity-70'}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={`${message.userstate[\"display-name\"]} hat ${message.userstate.bits} Bits gecheered`}\n                        message={createCheerMessage(createEmoteMessage(message.message, message.userstate.emotes), cheermotes)}\n                        tags={message.tags}\n        />\n    );\n};\n\nexport default CheerMessage;\n","import React from 'react';\nimport './RaidMessage.less';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport { getColor } from '../../helper/ColorHelper';\nimport { createEmoteMessage } from '../../helper/EmoteHelper';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\n\nconst RaidMessage = ({ message }: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-yellow-700'}\n                        type={message.type}\n                        userClassName={'dark:text-gray-900'}\n                        username={message.userstate['display-name']}\n                        messageClassName={'dark:text-gray-900'}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)} />\n    );\n};\n\nexport default RaidMessage;\n","export default __webpack_public_path__ + \"static/media/RaidMessage.8835538a.less\";","import React from 'react';\nimport './SubMessage.less';\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage} from \"../../helper/EmoteHelper\";\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\n\nconst SubMessage = ({message}: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-purple-900 bg-opacity-70'}\n                        usercolor={'#ddd'}\n                        username={`${message.userstate[\"display-name\"]} hat ein Abo (${message.userstate['msg-param-sub-plan']}) im ${message.userstate['msg-param-cumulative-months']}. Monat abgeschlossen: `}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)}\n                        tags={message.tags}\n        />\n    );\n};\n\nexport default SubMessage;\n","export default __webpack_public_path__ + \"static/media/SubMessage.10a37b26.less\";","import React from 'react';\nimport './SubGiftMessage.less';\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage} from \"../../helper/EmoteHelper\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\n\nconst SubGiftMessage = ({message}: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-purple-800 bg-opacity-70'}\n                        type={message.type}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={message.userstate['display-name']}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)}\n                        tags={message.tags}\n        />\n    );\n};\n\nexport default SubGiftMessage;\n","export default __webpack_public_path__ + \"static/media/SubGiftMessage.3607588c.less\";","import React from 'react';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\nimport { ChatEntry } from '../../redux/chat/chat.types';\n\nconst StatusMessage = ({ message }: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-gray-800 bg-opacity-70'}\n                        messageClassName={'italic text-purple-500'}\n            // usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n            // username={`${message.userstate[\"display-name\"]} hat ein Abo (${message.userstate['msg-param-sub-plan']}) im ${message.userstate['msg-param-cumulative-months']}. Monat abgeschlossen: `}\n            // message={createEmoteMessage(message.message, message.userstate.emotes)}/>\n                        message={message.message}\n        />\n    );\n};\n\nexport default StatusMessage;\n","import React, { useEffect } from 'react';\nimport './Chat.less';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chatActions, chatSelectors } from '../../redux/chat';\nimport ChatMessage from '../../components/ChatMessage/ChatMessage';\nimport { ChatEntryType } from '../../redux/chat/chat.types';\nimport CheerMessage from '../../components/CheerMessage/CheerMessage';\nimport RaidMessage from '../../components/RaidMessage/RaidMessage';\nimport SubMessage from '../../components/SubMessage/SubMessage';\nimport SubGiftMessage from '../../components/SubGiftMessage/SubGiftMessage';\nimport { useLocation } from 'react-router-dom';\nimport qs from 'query-string';\nimport DropDownMenu from '../../components/DropDownMenu/DropDownMenu';\nimport ChatMessageAdminMenu from './ChatMessageAdminMenu';\nimport StatusMessage from '../../components/StatusMessage/StatusMessage';\n\n\nconst Chat = ({}) => {\n\n    const dispatch = useDispatch();\n    const messages = useSelector(chatSelectors.getMessages);\n\n    const location = useLocation();\n    const searchParams = qs.parse(location.search);\n    console.log('loc', searchParams);\n\n    useEffect(() => {\n        if (searchParams.channel) {\n            dispatch(chatActions.selectChannel(searchParams.channel as string));\n        }\n    }, [searchParams.channel]);\n\n    return (\n        <div className='chat bg-gray '>\n            {\n                messages\n                    .filter(msg => {\n                        if (!msg.message || msg.message.length === 0)\n                            return true;\n\n                        let length = msg.message.length;\n                        let words = msg.message.split(' ').length;\n                        let noteCount = msg.message.match(/([a-zA-Z]+\\W*\\d+)/g);\n                        let wordLengthRatio = words / length;\n\n                        if (msg.type !== ChatEntryType.chat) {\n                            return true;\n                        }\n\n                        if (msg.message.length === 1) {\n                            return false;\n                        } else if (msg.message.startsWith('!bandit')) {\n                            return false;\n                        } else if (msg.message.startsWith('!marble')) {\n                            return false;\n                        } else if (msg.message.startsWith('!song')) {\n                            return false;\n                        } else if (msg.message.indexOf('https://www.thingiverse.com') > -1) {\n\n                        } else if (msg.userstate.username === 'projektionbot') {\n                            return false;\n                        } else if (msg.userstate.username === 'streamelements') {\n                            return false;\n                        } else if (msg.userstate.username === 'nightbot') {\n                            return false;\n                        } else if (msg.userstate.username === 'sascha_lbot') {\n                            return false;\n                        } else if (msg.message.match(/~\\d+/)) {\n                            return false;\n                        } else if ((noteCount || []).length > 10 && wordLengthRatio > 0.1) {\n                            return false;\n                        }\n                        return true;\n                    })\n                    .map((msg, index) => {\n                        switch (msg.type) {\n                            case ChatEntryType.cheer:\n                                return <CheerMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.raid:\n                                return <RaidMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.sub:\n                                return <SubMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.subgift:\n                                return <SubGiftMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.status:\n                                return <StatusMessage key={msg.userstate['id'] || msg.id} message={msg} />;\n                        }\n\n\n                        return <div key={msg.userstate['id']} className={'w-full flex flex-1'}>\n                            <div className={'flex-1 -my-1'}>\n                                <ChatMessage\n                                    message={msg} />\n                            </div>\n                            {/*TODO: add later -> check if mod / admin first*/}\n                            {/*<div className={''}>*/}\n                            {/*    <ChatMessageAdminMenu message={msg}/>*/}\n                            {/*</div>*/}\n                        </div>;\n\n                    })\n            }\n        </div>\n    );\n};\n\nexport default Chat;\n","import { AuthStateType } from './auth.types';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth.actions';\n\n\nconst initialState: AuthStateType = {\n    loginProcess: false\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(authActions.processToken, (state, action) => {\n            return {\n                ...state,\n                token: action.payload,\n                loginProcess: false,\n            }\n        })\n        .addCase(authActions.logout, (state, action) => {\n            return initialState;\n        })\n        .addCase(authActions.login, (state, action) => {\n            return {\n                ...state,\n                loginProcess: true,\n            }\n        })\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {AuthStateType} from \"./auth.types\";\n\nconst getSubState = (state: any) => state.auth as AuthStateType;\n\n\nconst getToken = createSelector(getSubState, state => state.token);\nconst isLoggedIn = createSelector(getSubState, state => !!state.token);\n\nconst isInLoginProcess = createSelector(getSubState, state => state.loginProcess)\n\n\nexport default {\n    isLoggedIn,\n    getToken,\n    isInLoginProcess\n};\n","import authReducer from './auth.reducer'\n\nexport {default as authActions} from './auth.actions'\nexport {default as authSelectors} from './auth.selectors'\n\n\nexport default authReducer;\n","import dotenv from 'dotenv';\ndotenv.config();\n\nconst CONFIG = {\n    TWITCH_CLIENT_ID: '1lk526oh4rsbzwcqowmcuc4m9agza3',\n    DEBUG: process.env.NODE_ENV === 'development',\n}\n\nexport default CONFIG;\n","import { call, delay, fork, put, select, take, takeLatest } from 'redux-saga/effects';\nimport tmi, { DeleteUserstate, SubGiftUserstate, SubMethods, SubMysteryGiftUserstate, SubUserstate } from 'tmi.js';\nimport { eventChannel } from 'redux-saga';\nimport chatActions, { chatMessage, chatMessageDeleted } from './chat.actions';\nimport {\n    ChatEntry,\n    ChatEntryTags,\n    ChatEntryType,\n    DeleteMessageActionPayload,\n    TimeoutActionPayload,\n} from './chat.types';\nimport { chatSelectors } from './index';\nimport { authActions } from '../auth';\nimport { TwitchUserInfo } from '../twitch/twitch.types';\nimport { twitchActions } from '../twitch';\nimport CONFIG from '../../config';\nimport dotprop from 'dot-prop-immutable';\n\nfunction* init(client: tmi.Client) {\n    console.log('INIT!');\n    // @ts-ignore\n    const chatChannel: any = yield call(createTmiChannel, client);\n    while (true) {\n\n        console.log('waiting for race...');\n        // const {event, close} = yield race({\n        //     event: take(chatChannel),\n        //     close: take(chatActions.selectChannel.type),\n        // })\n        // const event : ChatEntry = yield take(chatChannel);\n\n        // console.log(\"race\", event, close)\n\n        let event: PayloadAction<'message', ChatEntry> = yield take(chatChannel);\n\n        if (event?.payload?.userstate) {\n            let messageCount: number = yield select(chatSelectors.getMessageCount(event.payload.userstate['display-name']));\n            event = dotprop.set(event, `payload.tags`, []);\n            if (messageCount === 0) {\n                event = dotprop.set(event, `payload.tags.$end`, ChatEntryTags.first);\n            }\n            if(event.payload.userstate['custom-reward-id']){\n                event = dotprop.set(event, `payload.tags.$end`, ChatEntryTags.reward);\n            }\n        }\n\n        yield put(event);\n    }\n}\n\nfunction createTmiChannel(client: tmi.Client): any {\n    return eventChannel((emit) => {\n\n        console.log('Create Event Handler');\n\n        client.on('connected', async (e) => {\n            console.log('Connected!');\n            emit(chatActions.connected());\n        });\n\n\n        client.on('chat', (channel, userstate: tmi.ChatUserstate, message, self) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.chat,\n                timestamp: new Date(),\n                message,\n                userstate,\n            }));\n        });\n\n\n        client.on('cheer', (channel, userstate: tmi.ChatUserstate, message) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.cheer,\n                timestamp: new Date(),\n                message,\n                userstate,\n            }));\n        });\n\n        client.on('subscription', (channel: string, username: string, methods: SubMethods, message: string, userstate: SubUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.sub,\n                timestamp: new Date(),\n                message: message,\n                userstate,\n            }));\n        });\n\n        client.on('resub', (channel: string, username: string, months: number, message: string, userstate: SubUserstate, methods: SubMethods) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.sub,\n                timestamp: new Date(),\n                message: message,\n                userstate,\n            }));\n        });\n\n\n        client.on('submysterygift', (channel: string, username: string, numbOfSubs: number, methods: SubMethods, userstate: SubMysteryGiftUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.subgift,\n                timestamp: new Date(),\n                message: `hat ${numbOfSubs} Subs verschenkt!`,\n                userstate,\n            }));\n        });\n\n\n        client.on('subgift', (channel: string, username: string, streakMonths: number, recipient: string, methods: SubMethods, userstate: SubGiftUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.subgift,\n                timestamp: new Date(),\n                message: `hat ein Abo an ${recipient} verschenkt!`,\n                userstate,\n            }));\n        });\n\n        client.on('messagedeleted', (channel: string, username: string, deletedMessage: string, userstate: DeleteUserstate) => {\n            emit(chatMessageDeleted({\n                channel: channel,\n                username: username,\n                deletedMessage: deletedMessage,\n                messageId: userstate['target-msg-id'],\n            }));\n        });\n\n        client.on('action', (channel, userstate: tmi.ChatUserstate, message, self) => {\n            console.log('msg', channel, userstate, message, self);\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.action,\n                userstate,\n                message,\n                timestamp: new Date(),\n            }));\n        });\n\n        client.on('raided', (channel: string, username: string, viewers: number) => {\n            emit(chatMessage({\n                type: ChatEntryType.raid,\n                message: `raidet mit ${viewers} Personen!`,\n                userstate: {\n                    'display-name': username,\n                },\n                timestamp: new Date(),\n            }));\n        });\n\n        client.on('notice', (channel, msgid, message) => {\n            console.log('notice', channel, msgid, message);\n        });\n\n        client.on('join', (channel, username, self) => {\n            if (self) {\n                emit(chatActions.channelJoined(channel.substr(1)));\n                emit(chatMessage({\n                    id: new Date().toISOString(),\n                    type: ChatEntryType.status,\n                    timestamp: new Date(),\n                    message: `Verbunden mit ${channel}`,\n                    userstate: {},\n                }));\n            }\n        });\n\n        // setTimeout(() => {\n        //     emit(chatMessage({\n        //         id: 'xxxxxx',\n        //         type: ChatEntryType.cheer,\n        //         timestamp: new Date(),\n        //         message: 'Yoooo Cheer100 krissitvCheer100 Cheer100 Hey Nice Party1000 Party5 ',\n        //         userstate: {\n        //             'display-name': 'test',\n        //             bits: '2000',\n        //         },\n        //     }));\n        // }, 1000);\n\n\n        setTimeout(() => {\n            // emit(chatMessage({\n            //     type: ChatEntryType.cheer,\n            //     timestamp: new Date(),\n            //     message: \"yolo Cheer100\",\n            //     userstate: {\n            //         \"display-name\": \"sixi\",\n            //         bits: 200,\n            //     },\n            // }));\n            //\n            // emit(chatMessage({\n            //     type: ChatEntryType.sub,\n            //     timestamp: new Date(),\n            //     message: `${\"Nachricht\"}`,\n            //     userstate: {\n            //         \"display-name\": 'sixi',\n            //         \"msg-param-sub-plan-name\": 'Tier 1',\n            //         'msg-param-sub-plan': 'Prime',\n            //         'msg-param-cumulative-months': '3',\n            //     },\n            // }))\n            // emit(chatMessage({\n            //     type: ChatEntryType.raid,\n            //     message: `raidet mit 22 Personen!`,\n            //     userstate: {\n            //         \"display-name\": 'sixi',\n            //     },\n            //     timestamp: new Date(),\n            // }));\n        }, 1000);\n\n        return async () => {\n            console.log('Client unsubscribe');\n            await client.disconnect();\n        };\n    });\n}\n\n\nlet client: (tmi.Client | undefined) = undefined;\n\nfunction* createClient(userId?: string, token?: string) { //\n    console.log('XXXX CreateClient!', userId, token);\n\n    if (!client) {\n        client = tmi.client({\n            options: {\n                debug: CONFIG.DEBUG,\n                messagesLogLevel: CONFIG.DEBUG ? 'info' : 'error',\n                clientId: CONFIG.TWITCH_CLIENT_ID,\n            },\n            connection: {\n                secure: true,\n                reconnect: true,\n            },\n            identity: {\n                username: userId,\n                password: token && `oauth:${token}`,\n            },\n            channels: [],\n        });\n        yield fork(init, client);\n        yield delay(100);\n        yield client.connect();\n\n\n    }\n    // else {\n    //     yield fork(init, client);\n    //     console.log('reuse client');\n    //     yield client.connect();\n    //     let channelName: string = yield select(chatSelectors.getChannelName);\n    //     try {\n    //         yield client.part(channelName);\n    //     } catch (e) {\n    //\n    //     }\n    //     try {\n    //         yield client.join(channel);\n    //         yield put(chatActions.channelJoined(channel));\n    //\n    //     } catch (e) {\n    //\n    //     }\n    // }\n\n    return () => {\n        console.log('Create Client - Canceled');\n    };\n}\n\nfunction* deleteMessage({ payload: { msgId } }: PayloadAction<string, DeleteMessageActionPayload>) {\n    const channelName: string = yield select(chatSelectors.getChannelName);\n    if (client) {\n        try {\n            yield client.deletemessage(channelName, msgId);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n\nfunction* timeoutUser({ payload: { duration, reason, username } }: PayloadAction<string, TimeoutActionPayload>) {\n    const channelName: string = yield select(chatSelectors.getChannelName);\n    if (client) {\n        try {\n            yield client.timeout(channelName, username, duration, reason);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n\nfunction* handleChannels() {\n    let currentChannel: (string | undefined) = yield select(chatSelectors.getChannelName);\n\n    while (true) {\n        let { payload: channel }: PayloadAction<string, string> = yield take(chatActions.selectChannel.type);\n        console.log('Current channel', currentChannel, 'new', channel);\n        currentChannel = yield select(chatSelectors.getChannelName);\n        if (currentChannel && client) {\n            try {\n                yield client.part(currentChannel);\n            } catch (e) {\n                console.log('Error parting channel');\n            }\n        }\n        if (client) {\n            yield client.join(channel);\n        }\n    }\n\n}\n\nfunction* resetClient() {\n    if (client) {\n        try {\n            yield client.disconnect();\n        } catch (e) {\n            console.log('Client not connected');\n        }\n        client = undefined;\n    }\n}\n\nfunction* joinSelectedChannel() {\n    console.log('waiting for connection');\n    yield take(chatActions.connected.type);\n    let channel: string = yield select(chatSelectors.getChannelName);\n    console.log('current channel?', channel);\n    if (client) {\n        // @ts-ignore\n        yield client.join(channel);\n    }\n}\n\nfunction* createAuthedClient({ payload: token }: PayloadAction<string, string>) {\n    yield call(resetClient);\n\n    yield fork(joinSelectedChannel);\n\n    let { payload: userInfo }: { payload: TwitchUserInfo } = yield take(twitchActions.userInfoReceived.type);\n    yield call(createClient, userInfo.login, token);\n\n\n}\n\nfunction* createAnonymousClient() {\n    yield call(resetClient);\n    yield fork(joinSelectedChannel);\n    yield call(createClient, undefined, undefined);\n\n}\n\n\nexport default function* chatSaga() {\n\n\n    yield fork(handleChannels);\n\n    // yield takeLatest(chatActions.selectChannel.type, handleChannels)\n\n    // yield fork(createClient, undefined, undefined);\n    yield takeLatest(authActions.processToken.type, createAuthedClient);\n    yield takeLatest(authActions.logout.type, createAnonymousClient);\n\n    // @ts-ignore\n    if (yield take(authActions.processToken.type)) {\n        yield takeLatest(chatActions.deleteMessage.type, deleteMessage);\n        yield takeLatest(chatActions.timeoutUser.type, timeoutUser);\n    }\n\n\n}\n","import { delay, put, select, take, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { authActions, authSelectors } from './index';\nimport CONFIG from '../../config';\nimport { Action } from 'redux';\nimport { chatActions, chatSelectors } from '../chat';\nimport { persistor } from '../store';\n\n\nfunction* tokenReceived({payload : token}: PayloadAction<string, string>) {\n    console.log(\"Saga -> \", token)\n\n    let {data} = yield axios.get('https://id.twitch.tv/oauth2/userinfo',{\n        headers: {\n            'Authorization': `Bearer ${token}`,\n\n        }\n    })\n\n    console.log(\"Userinfo\", data)\n\n}\n\nfunction* loginProcess({} : Action) {\n    yield persistor.flush();\n    window.location.href = `https://id.twitch.tv/oauth2/authorize?client_id=${CONFIG.TWITCH_CLIENT_ID}&redirect_uri=${window.location.origin}/minimal-twitch-chat-react/login/callback&force_verify=false&response_type=token&scope=${encodeURIComponent('chat:edit chat:read channel:moderate')}&claims=sub,exp`\n}\n\nexport default function* authSaga() {\n    console.log(\"INIT auth\");\n\n    yield take('persist/REHYDRATE');\n\n    let loginInProgress: boolean = yield select(authSelectors.isInLoginProcess);\n    console.log(\"Login in process?\", loginInProgress)\n    if(!loginInProgress){\n        // yield put(chatActions.resetChat());\n        yield put(chatActions.resetMessages());\n        yield put(authActions.logout());\n\n\n\n    }\n\n    yield takeLatest(authActions.login.type, loginProcess);\n    yield takeLatest(authActions.processToken.type, tokenReceived)\n}\n","import { delay, put, select, take, takeLatest } from 'redux-saga/effects';\nimport { twitchActions, twitchSelectors } from './index';\nimport { authActions, authSelectors } from '../auth';\nimport axios from 'axios';\nimport { followedStreamsReceived, streamInfoReceived } from './twitch.actions';\nimport { chatActions, chatSelectors } from '../chat';\nimport CONFIG from '../../config';\nimport { TwitchCheermotes } from './twitch.types';\n\n\nfunction* getUserInfo() {\n    let token: string = yield select(authSelectors.getToken);\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/users`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n\n    });\n\n    yield put(twitchActions.userInfoReceived(data.data[0]));\n}\n\nfunction* getBroadcasterId(channelName: string) {\n\n    let token: string = yield select(authSelectors.getToken);\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/users`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n        params: {\n            login: channelName,\n        },\n    });\n    console.log('GetUser', data);\n    if (data.data[0])\n        return data.data[0].id as string;\n    throw new Error('channel not found');\n}\n\n\nfunction* getChannelInfo() {\n    let isLoggedIn: boolean = yield select(authSelectors.isLoggedIn);\n    if (isLoggedIn) {\n\n        const channelName: string = yield select(chatSelectors.getChannelName);\n\n        if (channelName) {\n            const broadcasterId: string = yield getBroadcasterId(channelName);\n            let token: string = yield select(authSelectors.getToken);\n            while (true) {\n\n                let { data } = yield axios.get(`https://api.twitch.tv/helix/streams`, {\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n                    },\n                    params: {\n                        user_id: broadcasterId,\n                    },\n                });\n\n                console.log('streamInfo', data);\n\n                yield put(streamInfoReceived(data.data[0]));\n\n                yield delay(30000);\n            }\n        }\n    }\n\n}\n\nfunction* requestFollowedStreams() {\n    let userId: string = yield select(twitchSelectors.getUserId);\n    let token: string = yield select(authSelectors.getToken);\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/streams/followed`,\n        {\n            params: {\n                'user_id': userId,\n            },\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n            },\n        });\n\n    yield put(followedStreamsReceived(data.data));\n}\n\nfunction* getCheermotes({ payload: channel }: PayloadAction<string, string>) {\n    const broadcasterId: string = yield getBroadcasterId(channel);\n    let token: string = yield select(authSelectors.getToken);\n\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/bits/cheermotes`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n        params: {\n            broadcaster_id: broadcasterId,\n        },\n    });\n\n    console.log('cheermotes', data);\n\n    yield put(twitchActions.cheermotesReceived(data.data.filter((e: TwitchCheermotes) => e.type === 'channel_custom')));\n\n}\n\nexport default function* twitchSaga() {\n    console.log('Twitch Saga Ready');\n    yield takeLatest(authActions.processToken.type, getUserInfo);\n    yield takeLatest([authActions.processToken.type, chatActions.channelJoined.type], getChannelInfo);\n\n\n    yield takeLatest(twitchActions.getFollowedStreams.type, requestFollowedStreams);\n\n\n    // @ts-ignore\n    if (yield take(authActions.processToken.type)) {\n        yield takeLatest(chatActions.channelJoined.type, getCheermotes);\n    }\n\n\n}\n","import chatSaga from \"./chat/chat.saga\";\nimport authSaga from './auth/auth.saga'\nimport {spawn} from 'redux-saga/effects'\nimport twitchSaga from \"./twitch/twitch.saga\";\n\n\n\nexport default function* rootSaga() {\n    console.log(\"Saga Init done\");\n\n    yield spawn(chatSaga);\n    yield spawn(authSaga);\n    yield spawn(twitchSaga);\n}\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport rootSaga from './saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './reducers';\nimport CONFIG from '../config';\n\n\nconst persistConfig = {\n    key: 'minimal-twitch-chat',\n    storage,\n    blacklist: [ 'twitch'],\n};\n\nexport const history = createBrowserHistory({ basename: '/minimal-twitch-chat-react/' });\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = createRootReducer(history);\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nlet store: Store;\n// if (process.env.NODE_ENV === 'development') {\nstore = createStore(persistedReducer, applyMiddleware(sagaMiddleware, routerMiddleware(history), logger));\n\n\nsagaMiddleware.run(rootSaga);\n\n\nexport const persistor = persistStore(store);\n\n\nexport default store;\n","import {combineReducers} from \"redux\";\nimport chatReducer from './chat'\nimport authReducer from './auth'\nimport twitchReducer from './twitch'\nimport {connectRouter} from \"connected-react-router\";\n\n\n\n\n\nconst createRootReducer = (history : any ) => {\n    const rootReducer = combineReducers({\n        chat: chatReducer,\n        auth: authReducer,\n        router: connectRouter(history),\n        twitch: twitchReducer,\n    })\n    return rootReducer;\n}\n\nexport default createRootReducer\n","import { ReactNode } from 'react';\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\n\n// @ts-ignore\nimport { AuthorizationCodeCallback, RequestAuthorizationCode } from 'react-oauth2-auth-code-flow';\nimport { push } from 'connected-react-router';\nimport { useDispatch } from 'react-redux';\nimport qs from 'query-string';\nimport { authActions } from '../../redux/auth';\n\n\nconst LoginCallback = () => {\n    const location = useLocation();\n\n    console.log('loc', location.hash);\n    const hashParams = qs.parse(location.hash);\n\n    console.log('SearchParams', hashParams);\n\n    const dispatch = useDispatch();\n\n    dispatch(authActions.processToken( (hashParams.access_token || hashParams.id_token) as string ));\n\n    dispatch(push('/'));\n\n    return null;\n};\n\nconst AuthHandler = ({ children }: { children: ReactNode }) => {\n\n    const dispatch = useDispatch();\n\n    const domain = 'id.twitch.tv/oauth2'; //process.env.REACT_APP_AUTH0_DOMAIN;\n    const clientId = '1lk526oh4rsbzwcqowmcuc4m9agza3'; //process.env.REACT_APP_AUTH0_CLIENT_ID;\n\n    const history = useHistory();\n\n\n    const onRedirectCallback = (appState: any) => {\n        history.push(appState?.returnTo || window.location.pathname);\n    };\n\n    return (\n        <Switch>\n            <Route path={'/login/callback'}>\n                <LoginCallback />\n            </Route>\n            {children}\n        </Switch>\n    );\n};\n\nexport default AuthHandler;\n","import React from 'react';\nimport './UserInfo.less';\nimport {TwitchUserInfo} from \"../../../redux/twitch/twitch.types\";\nimport DropDownMenu from \"../../DropDownMenu/DropDownMenu\";\n\nconst UserInfo = ({user} : {user: TwitchUserInfo}) => {\n    return (\n        <div className='user-info flex items-center space-x-2'>\n            <img className={'h-7 rounded-full'} src={user.profile_image_url}/>\n\n\n        </div>\n    );\n};\n\nexport default UserInfo;\n","export default __webpack_public_path__ + \"static/media/BaseScreen.b98d935f.less\";","export default __webpack_public_path__ + \"static/media/MainMenu.910eb3e9.less\";","export default __webpack_public_path__ + \"static/media/UserInfo.58018877.less\";","export default __webpack_public_path__ + \"static/media/DropDownMenu.5e0322c8.less\";","import React, {Fragment, ReactNode} from 'react';\nimport './DropDownMenu.less';\nimport {Disclosure, Menu, Transition} from '@headlessui/react'\nimport {BellIcon, MenuIcon, XIcon} from '@heroicons/react/outline'\nimport clsx from \"clsx\";\n\ntype Props = {\n    buttonComponent: ReactNode,\n    items: (MenuItem | false)[],\n    origin?: \"origin-top-right\" | 'origin-top-left' | 'origin-bottom-left' | 'origin-bottom-right',\n    className?: string,\n}\n\ntype MenuItem = {\n    title: string,\n    onClick: () => (void),\n\n}\n// type Origin {\n//     TopRight: \"origin-top-right\",\n//     TopLeft: \"origin-top-left\",\n// }\n\nconst DropDownMenu = ({buttonComponent, items, origin = 'origin-bottom-right', className}: Props) => {\n    return (\n        <div className={clsx('drop-down-menu z-50', className)}>\n            <Menu as=\"div\" className=\"relative z-50\">\n                <div>\n                    <Menu.Button\n                        className=\"bg-gray-800 flex text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                        <span className=\"sr-only\">Open user menu</span>\n                        {buttonComponent}\n                    </Menu.Button>\n                </div>\n                <Transition\n                    as={Fragment}\n                    enter=\"transition ease-out duration-100\"\n                    enterFrom=\"transform opacity-0 scale-95\"\n                    enterTo=\"transform opacity-100 scale-100\"\n                    leave=\"transition ease-in duration-75\"\n                    leaveFrom=\"transform opacity-100 scale-100\"\n                    leaveTo=\"transform opacity-0 scale-95\"\n                >\n                    <Menu.Items\n                        className={clsx(\n                            origin,\n                            origin === 'origin-top-left' && 'right-0',\n                            'absolute mt-2 w-48 z-50 rounded-md shadow-lg py-1 cursor-pointer\\t bg-white ring-1 ring-black ring-opacity-5 focus:outline-none')}>\n                        {items\n                            .filter(a => a)\n                            .map(a => a as MenuItem)\n                            .map((item, index) => {\n                            return <Menu.Item  key={`menu-item=${index}`}>\n                                {({active}) => (\n                                    <a\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            item.onClick();\n                                        }}\n                                        className={clsx(active ? 'bg-gray-100' : '', 'cursor-pointer block px-4 py-2 text-sm text-gray-700')}\n                                    >\n                                        {item.title}\n                                    </a>\n                                )}\n                            </Menu.Item>\n                        })}\n                    </Menu.Items>\n                </Transition>\n            </Menu>\n        </div>\n    );\n};\n\nexport default DropDownMenu;\n","import React, { useState } from 'react';\nimport './ChatInput.less';\nimport { ArrowCircleRightIcon, CheckCircleIcon } from '@heroicons/react/outline';\nimport clsx from 'clsx';\n\ninterface Props {\n    currentChannel?: string,\n    onSubmit?: (channel: string) => (void),\n    className?: string,\n}\n\nconst ChatInput = ({ currentChannel, onSubmit, className }: Props) => {\n\n    const [value, setValue] = useState('');\n\n    return (\n        <div className={clsx('chat-input items-center flex space-x-1', className)}>\n            <input\n                className={'bg-white text-black border-0 rounded-full h-7 px-4'}\n                value={value}\n                placeholder={currentChannel}\n                onKeyDown={e => {\n                    if (e.key === 'Enter') {\n                        if (onSubmit)\n                            onSubmit(value);\n                    }\n                }}\n                onChange={e => {\n                    setValue(e.target.value);\n                }}\n\n            />\n\n            {value.length === 0 || value === currentChannel ? (\n                <CheckCircleIcon className={'w-8 '} />\n            ) : (\n                <ArrowCircleRightIcon\n                    onClick={() => {\n                        if (onSubmit && value && value.length > 0)\n                            onSubmit(value);\n                    }}\n                    className={'w-8 cursor-pointer'} />\n            )}\n\n\n        </div>\n    );\n};\n\nexport default ChatInput;\n","export default __webpack_public_path__ + \"static/media/ChatInput.b6cbfb07.less\";","import React from 'react';\nimport './MainMenu.less';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authActions, authSelectors } from '../../../redux/auth';\nimport { twitchSelectors } from '../../../redux/twitch';\nimport UserInfo from '../../../components/Menu/UserInfo/UserInfo';\nimport DropDownMenu from '../../../components/DropDownMenu/DropDownMenu';\nimport { push } from 'connected-react-router';\nimport { MenuIcon, LoginIcon } from '@heroicons/react/outline';\nimport ChatInput from '../../../components/ChatInput/ChatInput';\nimport { chatActions, chatSelectors } from '../../../redux/chat';\nimport CONFIG from '../../../config';\n\nconst MainMenu = ({}) => {\n\n        const isLoggedIn = useSelector(authSelectors.isLoggedIn);\n        const user = useSelector(twitchSelectors.getUser);\n\n        const streamInfo = useSelector(twitchSelectors.getStreamInfo);\n\n        const currentChannel = useSelector(chatSelectors.getChannelName);\n\n        const dispatch = useDispatch();\n\n        return (\n            <menu className={'text-white bg-indigo-900 flex flex-row h-12 space-x-2 items-center p-2 fixed w-full top-0'}>\n\n\n                <DropDownMenu\n                    origin={'origin-top-right'}\n                    buttonComponent={<MenuIcon\n                        className={'bg-gray-800 hover:bg-indigo-500 transition rounded-full p-1 w-8'} />}\n                    items={[\n                        {\n                            title: 'Chat',\n                            onClick: () => {\n                                dispatch(push('/'));\n                            },\n                        },\n                        isLoggedIn && {\n                            title: 'Kanäle',\n                            onClick: () => {\n                                dispatch(push('/channels'));\n                            },\n                        },\n\n                    ].filter((a => a))}\n                />\n\n\n                <ChatInput\n                    onSubmit={(channel) => {\n                        dispatch(chatActions.selectChannel(channel));\n                    }}\n                    currentChannel={currentChannel} />\n\n                <div className={'flex flex-1 flex-shrink flex flex-row truncate'}>\n                    {streamInfo && (\n\n                        <div className={'stream-info flex flex-1 items-center flex-shrink space-x-4 truncate'}>\n                            <div\n                                className={'bg-purple-500 text-sm rounded-full items-center justify-center flex-shrink-0 flex p-1 px-2'}>\n                                {streamInfo.viewer_count}<span className={'hidden lg:block'}>&nbsp;Zuschauer</span>\n                            </div>\n                            <div className={'flex-shrink truncate'}>{streamInfo.title}</div>\n                        </div>\n\n\n                    )}\n                </div>\n\n\n                <div className={'flex-shrink-0  flex self-align-end'}>\n                    {user && (\n                        <DropDownMenu\n                            origin={'origin-top-left'}\n                            items={[\n                                {\n                                    title: 'Einstellungen',\n                                    onClick: () => {\n                                        dispatch(push('/settings'));\n                                    },\n                                },\n                                {\n                                    title: 'Abmelden',\n                                    onClick: () => {\n                                        dispatch(authActions.logout());\n                                    },\n                                },\n                            ]}\n                            buttonComponent={\n                                <UserInfo user={user} />\n                            } />\n                    )}\n                    {!isLoggedIn && (\n                        <div className={'text-white'}>\n                            <div className={'flex items-center cursor-pointer'} onClick={(e)=>{\n                                e.preventDefault();\n                                dispatch(authActions.login());\n                            }}>\n                                <LoginIcon className={'w-8 mr-2 cursor-pointer'} /> Anmelden\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </menu>\n        );\n    }\n;\n\nexport default MainMenu;\n","import React, {ReactNode} from 'react';\nimport './BaseScreen.less';\nimport MainMenu from \"./MainMenu/MainMenu\";\n\nconst BaseScreen = ({children}: { children: ReactNode }) => {\n\n\n    return (\n        <div className='base-screen'>\n            <MainMenu/>\n            <div className={'content pt-12'}>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default BaseScreen;\n","import React, {useEffect} from 'react';\nimport './ChannelList.less';\nimport {useDispatch} from \"react-redux\";\nimport {twitchActions} from \"../../redux/twitch\";\nimport {getFollowedStreams} from \"../../redux/twitch/twitch.actions\";\n\nconst ChannelList = ({}) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch(twitchActions.getFollowedStreams())\n    },[])\n\n    return (\n        <div className='channel-list'>\n\n        </div>\n    );\n};\n\nexport default ChannelList;\n","export default __webpack_public_path__ + \"static/media/ChannelList.5c6b1372.less\";","import React from 'react';\n\nimport Chat from './screens/Chat/Chat';\nimport { Provider } from 'react-redux';\nimport store, { history, persistor } from './redux/store';\n\nimport { ConnectedRouter } from 'connected-react-router';\nimport AuthHandler from './screens/Auth/AuthHandler';\nimport BaseScreen from './screens/BaseScreen/BaseScreen';\nimport { Route, Switch } from 'react-router-dom';\nimport ChannelList from './screens/ChannelList/ChannelList';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nfunction App() {\n    return (\n        <div className='App dark:bg-black'>\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <ConnectedRouter history={history}>\n                        <AuthHandler>\n                            <Switch>\n                                <Route>\n                                    <BaseScreen>\n                                        <Switch>\n                                            <Route path={'/channels'}>\n                                                <ChannelList />\n                                            </Route>\n                                            <Route>\n                                                <Chat />\n                                            </Route>\n                                        </Switch>\n                                    </BaseScreen>\n                                </Route>\n                            </Switch>\n                        </AuthHandler>\n                    </ConnectedRouter>\n                </PersistGate>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}