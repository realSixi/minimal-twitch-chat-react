{"version":3,"sources":["redux/chat/chat.types.ts","screens/Chat/Chat.less","redux/chat/chat.actions.tsx","redux/chat/chat.reducer.tsx","redux/chat/chat.selectors.tsx","redux/chat/index.tsx","components/ChatMessage/ChatMessage.less","helper/ColorHelper.ts","components/BasicChatEntry/BasicChatEntry.less","components/BasicChatEntry/BasicChatEntry.tsx","helper/EmoteHelper.tsx","helper/LinkHelper.tsx","components/ChatMessage/ChatMessage.tsx","components/CheerMessage/CheerMessage.tsx","components/CheerMessage/CheerMessage.less","components/RaidMessage/RaidMessage.tsx","components/RaidMessage/RaidMessage.less","components/SubMessage/SubMessage.tsx","components/SubMessage/SubMessage.less","components/SubGiftMessage/SubGiftMessage.tsx","components/SubGiftMessage/SubGiftMessage.less","screens/Chat/Chat.tsx","redux/auth/auth.actions.tsx","redux/auth/auth.reducer.tsx","redux/auth/auth.selectors.tsx","redux/auth/index.tsx","redux/twitch/twitch.actions.tsx","redux/twitch/twitch.reducer.tsx","redux/twitch/twitch.selectors.tsx","redux/twitch/index.tsx","config.ts","redux/chat/chat.saga.ts","redux/auth/auth.saga.ts","redux/twitch/twitch.saga.ts","redux/saga.ts","redux/reducers.ts","redux/store.ts","screens/Auth/AuthHandler.tsx","components/Menu/UserInfo/UserInfo.tsx","screens/BaseScreen/BaseScreen.less","screens/BaseScreen/MainMenu/MainMenu.less","components/Menu/UserInfo/UserInfo.less","components/DropDownMenu/DropDownMenu.less","components/DropDownMenu/DropDownMenu.tsx","components/ChatInput/ChatInput.tsx","components/ChatInput/ChatInput.less","screens/BaseScreen/MainMenu/MainMenu.tsx","screens/BaseScreen/BaseScreen.tsx","screens/ChannelList/ChannelList.tsx","screens/ChannelList/ChannelList.less","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatEntryType","selectChannel","createAction","channelJoined","chatMessage","chatMessageDeleted","banUser","timeoutUser","deleteMessage","reducer","createReducer","messages","userMessageCount","builder","addCase","state","action","channelName","payload","type","timestamp","Date","message","userstate","name","found","map","msg","id","subMessages","slice","messageId","deleted","getSubState","chat","getMessages","createSelector","getMessageCount","user","getChannelName","chatReducer","getColor","s","hash","str","i","length","charCodeAt","hashCode","chroma","hsl","hex","BasicChatEntry","usercolor","username","messageClassName","messageColor","className","userClassName","messageCount","useSelector","chatSelectors","clsx","dayjs","format","style","minWidth","color","createCheerMessage","match","createEmoteMessage","emotes","msgArray","replacements","Object","entries","forEach","emoteId","positions","values","position","index","split","start","end","push","parseInt","stringToReplace","substring","replacement","display","width","src","tmpMsg","sort","a","b","splitted","replace","createLinks","URL_REGEX","part","test","target","href","ChatMessage","randomUserColor","String","Math","random","get","CheerMessage","bits","RaidMessage","SubMessage","SubGiftMessage","Chat","dispatch","useDispatch","location","useLocation","searchParams","qs","parse","search","useEffect","channel","chatActions","filter","words","noteCount","wordLengthRatio","startsWith","indexOf","cheer","raid","sub","subgift","processToken","logout","initialState","authActions","token","auth","getToken","isLoggedIn","authReducer","userInfoReceived","streamInfoReceived","getFollowedStreams","followedStreamsReceived","undefined","streamInfo","twitch","getUser","getUserId","getStreamInfo","twitchReducer","dotenv","config","CONFIG","TWITCH_CLIENT_ID","DEBUG","process","init","createClient","chatSaga","client","call","createTmiChannel","chatChannel","take","event","put","eventChannel","emit","on","e","self","methods","months","numbOfSubs","streakMonths","recipient","deletedMessage","viewers","setTimeout","disconnect","userId","tmi","options","debug","messagesLogLevel","clientId","connection","secure","reconnect","identity","password","channels","connect","fork","delay","select","join","msgId","deletemessage","duration","reason","timeout","takeLatest","chatTask","race","twitchActions","tokenReceived","rehydrated","persistedChannelName","cancel","login","authSaga","axios","headers","data","getUserInfo","getBroadcasterId","getChannelInfo","requestFollowedStreams","twitchSaga","authSelectors","params","Error","broadcasterId","user_id","twitchSelectors","rootSaga","spawn","createRootReducer","history","combineReducers","router","connectRouter","persistConfig","key","storage","blacklist","createBrowserHistory","basename","sagaMiddleware","createSagaMiddleware","rootReducer","persistedReducer","persistReducer","store","createStore","applyMiddleware","routerMiddleware","logger","run","persistor","persistStore","LoginCallback","hashParams","access_token","id_token","AuthHandler","children","useHistory","path","UserInfo","profile_image_url","DropDownMenu","buttonComponent","items","origin","as","Button","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","item","Item","active","onClick","preventDefault","title","ChatInput","currentChannel","onSubmit","useState","value","setValue","placeholder","onKeyDown","onChange","MainMenu","viewer_count","window","encodeURIComponent","BaseScreen","ChannelList","App","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b2f6a27.chunk.js","sourcesContent":["import { Userstate } from 'tmi.js';\n\nexport interface ChatEntry {\n    id?: string,\n    timestamp: Date,\n    userstate: Userstate,\n    message: string,\n    type: ChatEntryType,\n    subMessages?: ChatEntry[],\n    deleted?: boolean\n}\n\n\nexport interface ChatMessageDeleted {\n    channel: string,\n    username: string,\n    deletedMessage: string,\n    messageId?: string,\n}\n\n\nexport interface BanActionPayload {\n    username: string,\n    reason?: string,\n}\n\n\nexport interface TimeoutActionPayload {\n    username: string,\n    reason?: string,\n    duration?: number,\n}\n\nexport interface DeleteMessageActionPayload {\n    msgId: string,\n}\n\nexport enum ChatEntryType {\n    chat,\n    action,\n    cheer,\n    sub,\n    resub,\n    subgift,\n    submysterygift,\n    anonsubgift,\n    primepaidupgrade,\n    host,\n    raid,\n}\n\n\n// interface CheerType {\n//     timestamp: Date,\n//     userstate: ChatUserstate,\n//     message: string,\n// }\n//\n// interface SubscriptionType {\n//     timestamp: Date,\n//     userstate: SubUserstate,\n//     message: string,\n// }\n\n// enum ChatMessageType {}\n\n\n// interface chatStateType {\n//     messages: (ChatMessageType | SubscriptionType | CheerType)[],\n// }\n\n\n","export default __webpack_public_path__ + \"static/media/Chat.e8afa995.less\";","import { createAction } from '@reduxjs/toolkit';\nimport {\n    BanActionPayload,\n    ChatEntry,\n    ChatMessageDeleted,\n    DeleteMessageActionPayload,\n    TimeoutActionPayload,\n} from './chat.types';\n\nexport const types = {};\n\n\nexport const selectChannel = createAction<string, 'chat/channel'>('chat/channel');\nexport const channelJoined = createAction<string, 'chat/joined'>('chat/joined');\n\nexport const chatMessage = createAction<ChatEntry, 'chat/message'>('chat/message');\n\nexport const chatMessageDeleted = createAction<ChatMessageDeleted, 'chat/message-deleted'>('chat/message-deleted');\n\nexport const banUser = createAction<BanActionPayload, 'chat/ban'>('chat/ban');\nexport const timeoutUser = createAction<TimeoutActionPayload, 'chat/timeout'>('chat/timeout');\nexport const deleteMessage = createAction<DeleteMessageActionPayload, 'chat/delete-message'>('chat/delete-message');\n\n\nexport default {\n    chatMessage,\n    selectChannel,\n    channelJoined,\n    banUser,\n    timeoutUser,\n    deleteMessage,\n    chatMessageDeleted\n};\n","import { channelJoined, chatMessage, chatMessageDeleted, selectChannel } from './chat.actions';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { ChatEntry, ChatEntryType } from './chat.types';\n\n\nexport interface ChatStateType {\n    messages: ChatEntry[],\n    userMessageCount: { [username: string]: number },\n    channelName?: string,\n}\n\nconst initialState: ChatStateType = {\n    messages: [],\n    userMessageCount: {},\n};\n\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(selectChannel, (state, action) => {\n            return {\n                ...state,\n                messages: [],\n            }\n        })\n        .addCase(channelJoined, (state, action) => {\n            return {\n                ...state,\n                channelName: action.payload,\n                messages: [\n                    {\n                        type: ChatEntryType.action,\n                        timestamp: new Date(),\n                        message: '',\n                        userstate: {\n                            'display-name': `verbunden mit ${action.payload} `,\n                        },\n                    },\n                    ...state.messages,\n                ],\n            };\n        })\n        .addCase(chatMessage, (state, action) => {\n            console.log('Chat message Case!');\n            const name = action.payload.userstate['display-name'] || 'anonymous';\n\n            if (action.payload.userstate['reply-parent-msg-id']) {\n                let found = false;\n                state.messages = state.messages.map(msg => {\n                    if (msg.id === action.payload.userstate['reply-parent-msg-id']) {\n                        msg.subMessages = [...(msg.subMessages || []), action.payload];\n                        found = true;\n                    }\n                    return msg;\n                });\n\n                if (!found) {\n                    state.messages = [action.payload, ...state.messages.slice(0, 300)];\n                }\n            } else {\n                state.messages = [action.payload, ...state.messages.slice(0, 300)];\n            }\n\n            state.userMessageCount = {\n                ...state.userMessageCount,\n                [name]: (state.userMessageCount[name] || 0) + 1,\n            };\n        })\n        .addCase(chatMessageDeleted, (state, action) => {\n            return {\n                ...state,\n                messages: state.messages.map(msg => {\n                    if (msg.id === action.payload.messageId) {\n                        return {\n                            ...msg,\n                            deleted: true,\n                        };\n                    }\n                    return msg;\n                }),\n            };\n        })\n    ;\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {ChatStateType} from \"./chat.reducer\";\n\nconst getSubState = (state: any) => state.chat as ChatStateType;\n\n\nconst getMessages = createSelector(getSubState, state => state.messages)\n\nconst getMessageCount = (user?: string) => createSelector(getSubState, state => state.userMessageCount[user || 'anonymous'] || 1);\n\n\nconst getChannelName = createSelector(getSubState, state => state.channelName)\n\n\nexport default {\n    getMessages,\n    getMessageCount,\n    getChannelName\n};\n","import chatReducer from './chat.reducer'\n\nexport {default as chatActions} from './chat.actions'\nexport {types as chatTypes} from './chat.actions'\nexport {default as chatSelectors} from './chat.selectors'\n\n\nexport default chatReducer;\n","export default __webpack_public_path__ + \"static/media/ChatMessage.ff8ee5b7.less\";","import chroma from 'chroma-js'\n\nexport function hashCode(str: string) { // java String#hashCode\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    return hash;\n}\n\nexport const getColor = (s : string) => {\n    let hash = hashCode(s);\n    return chroma.hsl(hash % 360, 0.7, 0.7).hex();\n}\n\nexport const isDark = (s: string) => {\n    //console.log(\"check darkgness\", s, chroma(s).get(\"lab.l\"));\n    return chroma(s).get(\"lab.l\") < 30;\n}\n\nexport const invertColor = (s: string) => {\n    return (Number(`0x1${s}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase()\n}\n","export default __webpack_public_path__ + \"static/media/BasicChatEntry.c4a400d9.less\";","import React, { ReactNode } from 'react';\nimport './BasicChatEntry.less';\nimport dayjs from 'dayjs';\nimport clsx from 'clsx';\nimport { useSelector } from 'react-redux';\nimport { chatSelectors } from '../../redux/chat';\nimport { Userstate } from 'tmi.js';\nimport { ChatEntry, ChatEntryType } from '../../redux/chat/chat.types';\nimport ChatMessage from '../ChatMessage/ChatMessage';\n\ntype Props = {\n    timestamp: Date,\n    username?: string,\n    usercolor?: string,\n    userClassName?: string,\n    message: string | ReactNode,\n    messageColor?: string,\n    messageClassName?: string,\n    className?: string,\n    userstate?: Userstate,\n    subMessages?: ChatEntry[],\n    type?: ChatEntryType,\n}\n\nconst BasicChatEntry = ({\n                            timestamp,\n                            usercolor,\n                            username,\n                            message,\n                            messageClassName,\n                            messageColor,\n                            className,\n                            userClassName,\n                            userstate,\n                            subMessages,\n                            type,\n                        }: Props) => {\n\n    let messageCount = useSelector(chatSelectors.getMessageCount(username));\n\n    return (\n        <div className={'m-2'}>\n            <div className={clsx('chat-message shadow-md flex p-2 rounded-md space-x-2 text-2xl', className)}>\n\n                <div\n                    className={'flex-shrink-0 leading-9 text-sm w-14 text-gray-600'}>{dayjs(timestamp).format('HH:mm:ss')}</div>\n                <div style={{ minWidth: '1.2rem' }}\n                     className={'flex-shrink-0 space-x-1 text-sm h-9 flex items-center content-center text-gray-900'}>\n                    {type === ChatEntryType.chat && messageCount === 1 && (\n\n                        <div\n                            className={'text-gray-900 text-sm inline-block bg-pink-600 flex items-center justify-center rounded-full w-5 text-center h-5'}>\n                            #1\n                        </div>\n\n                    )}\n                    {(userstate && userstate['custom-reward-id']) && (\n                        <div\n                            className={'text-gray-900 text-sm inline-block bg-indigo-900 flex items-center justify-center rounded-full w-5 text-center h-5'}>\n                            R\n                        </div>\n                    )}\n                </div>\n\n\n                <div>\n                <span\n                    style={{ color: usercolor }}\n                    className={clsx(userClassName)}>{username} </span>\n\n                    <span\n                        style={{ color: messageColor }}\n                        className={clsx(\n                            'flex-1',\n                            messageClassName || 'dark:text-gray-300',\n                        )}>{message}</span>\n                </div>\n            </div>\n\n\n            {subMessages && subMessages.map((msg => {\n                return <div className={'ml-4 -mr-2 '}>\n                    <ChatMessage message={msg} />\n                </div>;\n            }))}\n        </div>\n    );\n};\n\nexport default BasicChatEntry;\n","import React, { ReactNode } from 'react';\n\n\nexport const createCheerMessage = (message: ReactNode[]) => {\n    let result = message.map(msg => {\n        if (typeof msg === 'string') {\n\n            let m = msg.match(/([a-zA-Z]*)(\\d+)/);\n        }\n        return msg;\n    });\n\n\n    return message;\n};\n\nexport const createEmoteMessage = (message: string, emotes: { [emoteid: string]: string[] } | undefined) => {\n    if (!emotes)\n        return [message];\n\n\n    let msgArray: ReactNode[] = [];\n\n\n    const replacements: { stringToReplace: string, replacement: ReactNode, start: number }[] = [];\n\n    Object.entries(emotes || [])\n        .forEach(([emoteId, positions]) => {\n            Object.values(positions as any)\n                .forEach((position, index) => {\n                    let [start, end] = (position as string).split('-');\n\n                    replacements.push({\n                        start: parseInt(start),\n                        stringToReplace: message.substring(parseInt(start), parseInt(end) + 1),\n                        replacement: <img style={{ display: 'inline', width: '1.1em' }}\n                                          key={`emote-${emoteId}-${index}`}\n                                          src={`https://static-cdn.jtvnw.net/emoticons/v2/${emoteId}/default/dark/2.0`} />,\n                    });\n                });\n        });\n\n    let tmpMsg = message;\n    replacements\n        .sort((a, b) => a.start - b.start)\n        .forEach(({ stringToReplace, replacement }) => {\n            if (tmpMsg) {\n                let splitted = tmpMsg.split(stringToReplace);\n                msgArray.push(splitted[0]);\n                msgArray.push(replacement);\n                tmpMsg = tmpMsg.replace(splitted[0], '').replace(stringToReplace, '');\n            }\n        });\n    msgArray.push(tmpMsg);\n\n    return msgArray;\n};\n","import {ReactNode} from \"react\";\n\n\nexport const createLinks = (message: ReactNode[]) => {\n    return message.map(msg => {\n        if (typeof msg === 'string') {\n            const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\n            return msg\n                .split(\" \")\n                .map(part => URL_REGEX.test(part) ?\n                    <a className={'text-pink-300'}\n                       key={part}\n                       target={'_blank'} href={part}>{part} </a> : part + \" \"\n                );\n        }\n        return msg;\n    })\n\n}\n","import React from 'react';\nimport './ChatMessage.less';\nimport { getColor, isDark } from '../../helper/ColorHelper';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\nimport { createEmoteMessage } from '../../helper/EmoteHelper';\nimport { createLinks } from '../../helper/LinkHelper';\nimport clsx from 'clsx';\n\nconst ChatMessage = ({ message }: { message: ChatEntry }) => {\n\n    const randomUserColor = getColor(message.userstate['display-name'] || String(Math.random()));\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        type={message.type}\n                        className={'bg-gray-900'}\n                        userstate={message.userstate}\n                        username={message.userstate['display-name']}\n                        usercolor={message.userstate.color ? isDark(message.userstate.color) ? randomUserColor : message.userstate.color : null || randomUserColor}\n                        message={createLinks(createEmoteMessage(message.message, message.userstate.emotes))}\n                        subMessages={message.subMessages}\n                        messageClassName={clsx([\n                            message.deleted && 'text-gray-600',\n                            message.userstate['message-type'] === 'action' && 'italic',\n\n                        ])}\n\n        />\n    );\n};\n\nexport default ChatMessage;\n","import React from 'react';\nimport './CheerMessage.less';\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage, createCheerMessage} from \"../../helper/EmoteHelper\";\n\nconst CheerMessage = ({message}: { message: ChatEntry }) => {\n    return (\n\n        <BasicChatEntry timestamp={message.timestamp}\n                        type={message.type}\n                        className={'bg-blue-800 bg-opacity-70'}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={`${message.userstate[\"display-name\"]} hat ${message.userstate.bits} Bits gecheered`}\n                        message={createCheerMessage(createEmoteMessage(message.message, message.userstate.emotes))}/>\n    );\n};\n\nexport default CheerMessage;\n","export default __webpack_public_path__ + \"static/media/CheerMessage.bdb9e4c5.less\";","import React from 'react';\nimport './RaidMessage.less';\nimport { ChatEntry } from '../../redux/chat/chat.types';\nimport { getColor } from '../../helper/ColorHelper';\nimport { createEmoteMessage } from '../../helper/EmoteHelper';\nimport BasicChatEntry from '../BasicChatEntry/BasicChatEntry';\n\nconst RaidMessage = ({ message }: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-yellow-700'}\n                        type={message.type}\n                        userClassName={'dark:text-gray-900'}\n                        username={message.userstate['display-name']}\n                        messageClassName={'dark:text-gray-900'}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)} />\n    );\n};\n\nexport default RaidMessage;\n","export default __webpack_public_path__ + \"static/media/RaidMessage.8835538a.less\";","import React from 'react';\nimport './SubMessage.less';\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage} from \"../../helper/EmoteHelper\";\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\n\nconst SubMessage = ({message}: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-purple-900 bg-opacity-70'}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={`${message.userstate[\"display-name\"]} hat ein Abo (${message.userstate['msg-param-sub-plan']}) im ${message.userstate['msg-param-cumulative-months']}. Monat abgeschlossen: `}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)}/>\n    );\n};\n\nexport default SubMessage;\n","export default __webpack_public_path__ + \"static/media/SubMessage.10a37b26.less\";","import React from 'react';\nimport './SubGiftMessage.less';\nimport BasicChatEntry from \"../BasicChatEntry/BasicChatEntry\";\nimport {getColor} from \"../../helper/ColorHelper\";\nimport {createEmoteMessage} from \"../../helper/EmoteHelper\";\nimport {ChatEntry} from \"../../redux/chat/chat.types\";\n\nconst SubGiftMessage = ({message}: { message: ChatEntry }) => {\n    return (\n        <BasicChatEntry timestamp={message.timestamp}\n                        className={'bg-purple-800 bg-opacity-70'}\n                        type={message.type}\n                        usercolor={message.userstate.color || getColor(message.userstate['display-name'] || String(Math.random()))}\n                        username={message.userstate['display-name']}\n                        message={createEmoteMessage(message.message, message.userstate.emotes)}/>\n    );\n};\n\nexport default SubGiftMessage;\n","export default __webpack_public_path__ + \"static/media/SubGiftMessage.3607588c.less\";","import React, { useEffect } from 'react';\nimport './Chat.less';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chatActions, chatSelectors } from '../../redux/chat';\nimport ChatMessage from '../../components/ChatMessage/ChatMessage';\nimport { ChatEntryType } from '../../redux/chat/chat.types';\nimport CheerMessage from '../../components/CheerMessage/CheerMessage';\nimport RaidMessage from '../../components/RaidMessage/RaidMessage';\nimport SubMessage from '../../components/SubMessage/SubMessage';\nimport SubGiftMessage from '../../components/SubGiftMessage/SubGiftMessage';\nimport { useLocation } from 'react-router-dom';\nimport qs from 'query-string';\nimport DropDownMenu from '../../components/DropDownMenu/DropDownMenu';\nimport ChatMessageAdminMenu from './ChatMessageAdminMenu';\n\n\nconst Chat = ({}) => {\n\n    const dispatch = useDispatch();\n    const messages = useSelector(chatSelectors.getMessages);\n\n    const location = useLocation();\n    const searchParams = qs.parse(location.search);\n    console.log('loc', searchParams);\n\n    useEffect(() => {\n        if (searchParams.channel) {\n            dispatch(chatActions.selectChannel(searchParams.channel as string));\n        }\n    }, [searchParams.channel]);\n\n    return (\n        <div className='chat bg-gray '>\n            {\n                messages\n                    .filter(msg => {\n                        if(!msg.message || msg.message.length === 0)\n                            return true;\n\n                        let length = msg.message.length;\n                        let words = msg.message.split(' ').length;\n                        let noteCount = msg.message.match(/([a-zA-Z]+\\W*\\d+)/g);\n                        let wordLengthRatio = words / length;\n\n                        if (msg.type !== ChatEntryType.chat) {\n                            return true;\n                        }\n\n                        if (msg.message.length === 1) {\n                            return false;\n                        } else if (msg.message.startsWith('!bandit')) {\n                            return false;\n                        } else if (msg.message.startsWith('!marble')) {\n                            return false;\n                        } else if (msg.message.startsWith('!song')) {\n                            return false;\n                        } else if (msg.message.indexOf('https://www.thingiverse.com') > -1) {\n\n                        } else if (msg.userstate.username === 'projektionbot') {\n                            return false;\n                        } else if (msg.userstate.username === 'streamelements') {\n                            return false;\n                        } else if (msg.userstate.username === 'sascha_lbot') {\n                            return false;\n                        } else if (msg.message.match(/~\\d+/)) {\n                            return false;\n                        } else if ((noteCount || []).length > 10 && wordLengthRatio > 0.1) {\n                            return false;\n                        }\n                        return true;\n                    })\n                    .map((msg, index) => {\n                        switch (msg.type) {\n                            case ChatEntryType.cheer:\n                                return <CheerMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.raid:\n                                return <RaidMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.sub:\n                                return <SubMessage key={msg.userstate['id']} message={msg} />;\n                            case ChatEntryType.subgift:\n                                return <SubGiftMessage key={msg.userstate['id']} message={msg} />;\n                        }\n\n\n                        return <div key={msg.userstate['id']}  className={'w-full flex flex-1'}>\n                            <div className={'flex-1 -my-1'}>\n                                <ChatMessage\n                                    message={msg} />\n                            </div>\n                            {/*TODO: add later -> check if mod / admin first*/}\n                            {/*<div className={''}>*/}\n                            {/*    <ChatMessageAdminMenu message={msg}/>*/}\n                            {/*</div>*/}\n                        </div>;\n\n                    })\n            }\n        </div>\n    );\n};\n\nexport default Chat;\n","import { createAction } from '@reduxjs/toolkit';\n\n\nexport const processToken = createAction<string, 'login/token'>('login/token');\nexport const logout = createAction('login/logout');\n\n\nexport default {\n    processToken,\n    logout,\n};\n","import { AuthStateType } from './auth.types';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth.actions';\n\n\nconst initialState: AuthStateType = {};\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(authActions.processToken, (state, action) => {\n            return {\n                ...state,\n                token: action.payload,\n            }\n        })\n        .addCase(authActions.logout, (state, action) => {\n            return initialState;\n        })\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {AuthStateType} from \"./auth.types\";\n\nconst getSubState = (state: any) => state.auth as AuthStateType;\n\n\nconst getToken = createSelector(getSubState, state => state.token);\nconst isLoggedIn = createSelector(getSubState, state => !!state.token);\n\n\nexport default {\n    isLoggedIn,\n    getToken\n};\n","import authReducer from './auth.reducer'\n\nexport {default as authActions} from './auth.actions'\nexport {default as authSelectors} from './auth.selectors'\n\n\nexport default authReducer;\n","import {createAction} from \"@reduxjs/toolkit\";\nimport {TwitchStreamInfo, TwitchUserInfo} from \"./twitch.types\";\n\n\n// export const tokenReceveived = createAction<TokenLoginActionPayload, typeof LoginActionTypes[\"login/token\"]>(LoginActionTypes[\"login/token\"])\n\n\nexport const userInfoReceived = createAction<TwitchUserInfo, 'twitch/userinfo'>('twitch/userinfo')\nexport const streamInfoReceived = createAction<TwitchStreamInfo, 'twitch/streaminfo'>('twitch/streaminfo');\n\nexport const getFollowedStreams = createAction<undefined, 'twitch/followedStreams'>('twitch/followedStreams');\nexport const followedStreamsReceived = createAction<TwitchStreamInfo[], 'twitch/followedStreams'>('twitch/followedStreams');\n\n\n\nexport default {\n    userInfoReceived,\n    streamInfoReceived,\n    getFollowedStreams,\n    followedStreamsReceived\n};\n","import {AnyAction} from \"redux\";\nimport {TwitchStateType} from \"./twitch.types\";\nimport {createReducer} from \"@reduxjs/toolkit\";\nimport {userInfoReceived, streamInfoReceived} from \"./twitch.actions\";\nimport {logout} from \"../auth/auth.actions\";\n\n\nconst initialState: TwitchStateType = {\n    user: undefined,\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n    builder\n        .addCase(userInfoReceived, (state, action) => {\n            return {\n                ...state,\n                user: action.payload,\n            }\n        })\n        .addCase(streamInfoReceived, (state, action) => {\n            return {\n                ...state,\n                streamInfo: action.payload,\n            }\n        })\n        .addCase(logout, (state, action) => {\n            return initialState;\n        })\n});\n\nexport default reducer;\n","import {createSelector} from 'reselect';\nimport {TwitchStateType} from \"./twitch.types\";\n\nconst getSubState = (state: any) => state.twitch as TwitchStateType;\n\nconst getUser = createSelector(getSubState, state => state.user);\n\nconst getUserId = createSelector(getUser, user => user?.id);\n\nconst getStreamInfo = createSelector(getSubState, state => state.streamInfo);\n\n\nexport default {\n    getUser,\n    getUserId,\n    getStreamInfo,\n};\n","import twitchReducer from './twitch.reducer'\n\nexport {default as twitchActions} from './twitch.actions'\nexport {default as twitchSelectors} from './twitch.selectors'\n\n\nexport default twitchReducer;\n","import dotenv from 'dotenv';\ndotenv.config();\n\nconst CONFIG = {\n    TWITCH_CLIENT_ID: '1lk526oh4rsbzwcqowmcuc4m9agza3',\n    DEBUG: process.env.NODE_ENV === 'development',\n}\n\nexport default CONFIG;\n","import { call, cancel, delay, fork, put, race, select, take, takeLatest } from 'redux-saga/effects';\nimport tmi, { DeleteUserstate, SubGiftUserstate, SubMethods, SubMysteryGiftUserstate, SubUserstate } from 'tmi.js';\nimport { eventChannel, Task } from 'redux-saga';\nimport chatActions, { chatMessage, chatMessageDeleted } from './chat.actions';\nimport { ChatEntry, ChatEntryType, DeleteMessageActionPayload, TimeoutActionPayload } from './chat.types';\nimport { chatSelectors } from './index';\nimport { authActions } from '../auth';\nimport { TwitchUserInfo } from '../twitch/twitch.types';\nimport { twitchActions } from '../twitch';\nimport { Action } from 'redux';\nimport CONFIG from '../../config';\n\n\nfunction* init(client: tmi.Client) {\n    console.log('INIT!');\n    // @ts-ignore\n    const chatChannel: any = yield call(createTmiChannel, client);\n    while (true) {\n\n        console.log('waiting for race...');\n        // const {event, close} = yield race({\n        //     event: take(chatChannel),\n        //     close: take(chatActions.selectChannel.type),\n        // })\n        // const event : ChatEntry = yield take(chatChannel);\n\n        // console.log(\"race\", event, close)\n\n        const event: PayloadAction<'message', ChatEntry> = yield take(chatChannel);\n\n\n        yield put(event);\n    }\n}\n\nfunction createTmiChannel(client: tmi.Client): any {\n    return eventChannel((emit) => {\n\n        client.on('connected', async (e) => {\n            console.log('Connected!');\n        });\n\n        client.on('chat', (channel, userstate: tmi.ChatUserstate, message, self) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.chat,\n                timestamp: new Date(),\n                message,\n                userstate,\n            }));\n        });\n\n\n        client.on('cheer', (channel, userstate: tmi.ChatUserstate, message) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.cheer,\n                timestamp: new Date(),\n                message,\n                userstate,\n            }));\n        });\n\n        client.on('subscription', (channel: string, username: string, methods: SubMethods, message: string, userstate: SubUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.sub,\n                timestamp: new Date(),\n                message: message,\n                userstate,\n            }));\n        });\n\n        client.on('resub', (channel: string, username: string, months: number, message: string, userstate: SubUserstate, methods: SubMethods) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.sub,\n                timestamp: new Date(),\n                message: message,\n                userstate,\n            }));\n        });\n\n\n        client.on('submysterygift', (channel: string, username: string, numbOfSubs: number, methods: SubMethods, userstate: SubMysteryGiftUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.subgift,\n                timestamp: new Date(),\n                message: `hat ${numbOfSubs} Subs verschenkt!`,\n                userstate,\n            }));\n        });\n\n\n        client.on('subgift', (channel: string, username: string, streakMonths: number, recipient: string, methods: SubMethods, userstate: SubGiftUserstate) => {\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.subgift,\n                timestamp: new Date(),\n                message: `hat ein Abo an ${recipient} verschenkt!`,\n                userstate,\n            }));\n        });\n\n        client.on('messagedeleted', (channel: string, username: string, deletedMessage: string, userstate: DeleteUserstate) => {\n            emit(chatMessageDeleted({\n                channel: channel,\n                username: username,\n                deletedMessage: deletedMessage,\n                messageId: userstate['target-msg-id'],\n            }));\n        });\n\n        client.on('action', (channel, userstate: tmi.ChatUserstate, message, self) => {\n            console.log('msg', channel, userstate, message, self);\n            emit(chatMessage({\n                id: userstate.id,\n                type: ChatEntryType.action,\n                userstate,\n                message,\n                timestamp: new Date(),\n            }));\n        });\n\n        client.on('raided', (channel: string, username: string, viewers: number) => {\n            emit(chatMessage({\n                type: ChatEntryType.raid,\n                message: `raidet mit ${viewers} Personen!`,\n                userstate: {\n                    'display-name': username,\n                },\n                timestamp: new Date(),\n            }));\n        });\n\n        setTimeout(() => {\n            // emit(chatMessage({\n            //     type: ChatEntryType.cheer,\n            //     timestamp: new Date(),\n            //     message: \"yolo Cheer100\",\n            //     userstate: {\n            //         \"display-name\": \"sixi\",\n            //         bits: 200,\n            //     },\n            // }));\n            //\n            // emit(chatMessage({\n            //     type: ChatEntryType.sub,\n            //     timestamp: new Date(),\n            //     message: `${\"Nachricht\"}`,\n            //     userstate: {\n            //         \"display-name\": 'sixi',\n            //         \"msg-param-sub-plan-name\": 'Tier 1',\n            //         'msg-param-sub-plan': 'Prime',\n            //         'msg-param-cumulative-months': '3',\n            //     },\n            // }))\n            // emit(chatMessage({\n            //     type: ChatEntryType.raid,\n            //     message: `raidet mit 22 Personen!`,\n            //     userstate: {\n            //         \"display-name\": 'sixi',\n            //     },\n            //     timestamp: new Date(),\n            // }));\n        }, 1000);\n\n        return async () => {\n            console.log('Client unsubscribe');\n            await client.disconnect();\n        };\n    });\n}\n\n\nlet client: (tmi.Client | undefined) = undefined;\n\nfunction* createClient(channel: string, userId?: string, token?: string) { //\n\n    if (!client) {\n        client = tmi.client({\n            options: {\n                debug: CONFIG.DEBUG,\n                messagesLogLevel: CONFIG.DEBUG ? 'info' : 'error',\n                clientId: CONFIG.TWITCH_CLIENT_ID,\n            },\n            connection: {\n                secure: true,\n                reconnect: true,\n            },\n            identity: {\n                username: userId,\n                password: token && `oauth:${token}`,\n            },\n            channels: [channel],\n        });\n        yield client.connect();\n\n\n        yield put(chatActions.channelJoined(channel));\n        yield fork(init, client);\n\n        yield delay(1000);\n\n    } else {\n        let channelName: string = yield select(chatSelectors.getChannelName);\n        try {\n            yield client.part(channelName);\n        } catch (e) {\n\n        }\n        try {\n            yield client.join(channel);\n            yield put(chatActions.channelJoined(channel));\n            yield fork(init, client);\n        } catch (e) {\n\n        }\n    }\n\n    return () => {\n        console.log('Create Client - Canceled');\n    };\n}\n\nfunction* deleteMessage({ payload: { msgId } }: PayloadAction<string, DeleteMessageActionPayload>) {\n    const channelName: string = yield select(chatSelectors.getChannelName);\n    if (client) {\n        try {\n            yield client.deletemessage(channelName, msgId);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n\nfunction* timeoutUser({ payload: { duration, reason, username } }: PayloadAction<string, TimeoutActionPayload>) {\n    const channelName: string = yield select(chatSelectors.getChannelName);\n    if (client) {\n        try {\n            yield client.timeout(channelName, username, duration, reason);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n}\n\n\nexport default function* chatSaga() {\n    yield takeLatest(chatActions.deleteMessage.type, deleteMessage);\n    yield takeLatest(chatActions.timeoutUser.type, timeoutUser);\n\n    let channel = undefined;\n    let token = undefined;\n    let user = undefined;\n\n    let chatTask: (Task | undefined) = undefined;\n\n    while (true) {\n        let {\n            selectChannel,\n            userInfoReceived,\n            tokenReceived,\n            rehydrated,\n        }: {\n            selectChannel: PayloadAction<string, string>,\n            userInfoReceived: PayloadAction<string, TwitchUserInfo>,\n            tokenReceived: PayloadAction<string, string>\n            rehydrated: Action\n        } = yield race({\n            selectChannel: take(chatActions.selectChannel.type),\n            userInfoReceived: take(twitchActions.userInfoReceived.type),\n            tokenReceived: take(authActions.processToken.type),\n            rehydrated: take('persist/REHYDRATE'),\n        });\n\n        if (rehydrated) {\n            let persistedChannelName: (string | undefined) = yield select(chatSelectors.getChannelName);\n            if (persistedChannelName)\n                channel = persistedChannelName;\n        }\n\n        if (tokenReceived) {\n            token = tokenReceived.payload;\n        } else if (selectChannel) {\n            channel = selectChannel.payload;\n        } else if (userInfoReceived) {\n            user = userInfoReceived.payload;\n        }\n\n        console.log('Race Completed');\n\n        if (chatTask) {\n            yield cancel(chatTask);\n        }\n\n        if (channel) {\n            chatTask = yield fork(createClient, channel, user?.login, token);\n        }\n\n    }\n\n}\n","import { takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { authActions } from './index';\n\n\nfunction* tokenReceived({payload : token}: PayloadAction<string, string>) {\n    console.log(\"Saga -> \", token)\n\n    let {data} = yield axios.get('https://id.twitch.tv/oauth2/userinfo',{\n        headers: {\n            'Authorization': `Bearer ${token}`,\n\n        }\n    })\n\n    console.log(\"Userinfo\", data)\n\n}\n\nexport default function* authSaga() {\n    console.log(\"INIT auth\");\n\n\n    yield takeLatest(authActions.processToken.type, tokenReceived)\n\n}\n","import { delay, put, select, takeLatest } from 'redux-saga/effects';\nimport { twitchActions, twitchSelectors } from './index';\nimport { authActions, authSelectors } from '../auth';\nimport axios from 'axios';\nimport { followedStreamsReceived, streamInfoReceived } from './twitch.actions';\nimport { chatActions, chatSelectors } from '../chat';\nimport CONFIG from '../../config';\n\n\nfunction* getUserInfo() {\n    let token: string = yield select(authSelectors.getToken);\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/users`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n\n    });\n\n    yield put(twitchActions.userInfoReceived(data.data[0]));\n}\n\nfunction* getBroadcasterId(channelName: string) {\n\n    let token: string = yield select(authSelectors.getToken);\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/users`, {\n        headers: {\n            'Authorization': `Bearer ${token}`,\n            'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n        },\n        params: {\n            login: channelName,\n        },\n    });\n    console.log('GetUser', data);\n    if (data.data[0])\n        return data.data[0].id as string;\n    throw new Error('channel not found');\n}\n\n\nfunction* getChannelInfo() {\n    let isLoggedIn: boolean = yield select(authSelectors.isLoggedIn);\n    if (isLoggedIn) {\n\n        const channelName: string = yield select(chatSelectors.getChannelName);\n\n        if (channelName) {\n            const broadcasterId: string = yield getBroadcasterId(channelName);\n            let token: string = yield select(authSelectors.getToken);\n            while (true) {\n\n                let { data } = yield axios.get(`https://api.twitch.tv/helix/streams`, {\n                    headers: {\n                        'Authorization': `Bearer ${token}`,\n                        'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n                    },\n                    params: {\n                        user_id: broadcasterId,\n                    },\n                });\n\n                console.log('streamInfo', data);\n\n                yield put(streamInfoReceived(data.data[0]));\n\n                yield delay(30000);\n            }\n        }\n    }\n\n}\n\nfunction* requestFollowedStreams() {\n    let userId: string = yield select(twitchSelectors.getUserId);\n    let token: string = yield select(authSelectors.getToken);\n\n    let { data } = yield axios.get(`https://api.twitch.tv/helix/streams/followed`,\n        {\n            params: {\n                'user_id': userId,\n            },\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Client-Id': CONFIG.TWITCH_CLIENT_ID,\n            },\n        });\n\n    yield put(followedStreamsReceived(data.data));\n}\n\nexport default function* twitchSaga() {\n    console.log('Twitch Saga Ready');\n    yield takeLatest(authActions.processToken.type, getUserInfo);\n    yield takeLatest([authActions.processToken.type, chatActions.channelJoined.type], getChannelInfo);\n\n\n    yield takeLatest(twitchActions.getFollowedStreams.type, requestFollowedStreams);\n}\n","import chatSaga from \"./chat/chat.saga\";\nimport authSaga from './auth/auth.saga'\nimport {spawn} from 'redux-saga/effects'\nimport twitchSaga from \"./twitch/twitch.saga\";\n\n\n\nexport default function* rootSaga() {\n    console.log(\"Saga Init done\");\n\n    yield spawn(chatSaga);\n    yield spawn(authSaga);\n    yield spawn(twitchSaga);\n}\n","import {combineReducers} from \"redux\";\nimport chatReducer from './chat'\nimport authReducer from './auth'\nimport twitchReducer from './twitch'\nimport {connectRouter} from \"connected-react-router\";\n\n\n\n\n\nconst createRootReducer = (history : any ) => {\n    const rootReducer = combineReducers({\n        chat: chatReducer,\n        auth: authReducer,\n        router: connectRouter(history),\n        twitch: twitchReducer,\n    })\n    return rootReducer;\n}\n\nexport default createRootReducer\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport rootSaga from './saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './reducers';\n\n\nconst persistConfig = {\n    key: 'minimal-twitch-chat',\n    storage,\n    blacklist: ['auth', 'twitch'],\n};\n\nexport const history = createBrowserHistory({ basename: '/minimal-twitch-chat-react/' });\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = createRootReducer(history);\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(persistedReducer, applyMiddleware(sagaMiddleware, routerMiddleware(history), logger));\n\nsagaMiddleware.run(rootSaga);\n\n\nexport const persistor = persistStore(store);\n\nexport default store;\n","import { ReactNode } from 'react';\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\n\n// @ts-ignore\nimport { AuthorizationCodeCallback, RequestAuthorizationCode } from 'react-oauth2-auth-code-flow';\nimport { push } from 'connected-react-router';\nimport { useDispatch } from 'react-redux';\nimport qs from 'query-string';\nimport { authActions } from '../../redux/auth';\n\n\nconst LoginCallback = () => {\n    const location = useLocation();\n\n    console.log('loc', location.hash);\n    const hashParams = qs.parse(location.hash);\n\n    console.log('SearchParams', hashParams);\n\n    const dispatch = useDispatch();\n\n    dispatch(authActions.processToken( (hashParams.access_token || hashParams.id_token) as string ));\n\n    dispatch(push('/'));\n\n    return null;\n};\n\nconst AuthHandler = ({ children }: { children: ReactNode }) => {\n\n    const dispatch = useDispatch();\n\n    const domain = 'id.twitch.tv/oauth2'; //process.env.REACT_APP_AUTH0_DOMAIN;\n    const clientId = '1lk526oh4rsbzwcqowmcuc4m9agza3'; //process.env.REACT_APP_AUTH0_CLIENT_ID;\n\n    const history = useHistory();\n\n\n    const onRedirectCallback = (appState: any) => {\n        history.push(appState?.returnTo || window.location.pathname);\n    };\n\n    return (\n        <Switch>\n            <Route path={'/login/callback'}>\n                <LoginCallback />\n            </Route>\n            {children}\n        </Switch>\n    );\n};\n\nexport default AuthHandler;\n","import React from 'react';\nimport './UserInfo.less';\nimport {TwitchUserInfo} from \"../../../redux/twitch/twitch.types\";\nimport DropDownMenu from \"../../DropDownMenu/DropDownMenu\";\n\nconst UserInfo = ({user} : {user: TwitchUserInfo}) => {\n    return (\n        <div className='user-info flex items-center space-x-2'>\n            <img className={'h-7 rounded-full'} src={user.profile_image_url}/>\n\n\n        </div>\n    );\n};\n\nexport default UserInfo;\n","export default __webpack_public_path__ + \"static/media/BaseScreen.b98d935f.less\";","export default __webpack_public_path__ + \"static/media/MainMenu.910eb3e9.less\";","export default __webpack_public_path__ + \"static/media/UserInfo.58018877.less\";","export default __webpack_public_path__ + \"static/media/DropDownMenu.5e0322c8.less\";","import React, {Fragment, ReactNode} from 'react';\nimport './DropDownMenu.less';\nimport {Disclosure, Menu, Transition} from '@headlessui/react'\nimport {BellIcon, MenuIcon, XIcon} from '@heroicons/react/outline'\nimport clsx from \"clsx\";\n\ntype Props = {\n    buttonComponent: ReactNode,\n    items: (MenuItem | false)[],\n    origin?: \"origin-top-right\" | 'origin-top-left' | 'origin-bottom-left' | 'origin-bottom-right',\n    className?: string,\n}\n\ntype MenuItem = {\n    title: string,\n    onClick: () => (void),\n\n}\n// type Origin {\n//     TopRight: \"origin-top-right\",\n//     TopLeft: \"origin-top-left\",\n// }\n\nconst DropDownMenu = ({buttonComponent, items, origin = 'origin-bottom-right', className}: Props) => {\n    return (\n        <div className={clsx('drop-down-menu z-50', className)}>\n            <Menu as=\"div\" className=\"relative z-50\">\n                <div>\n                    <Menu.Button\n                        className=\"bg-gray-800 flex text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                        <span className=\"sr-only\">Open user menu</span>\n                        {buttonComponent}\n                    </Menu.Button>\n                </div>\n                <Transition\n                    as={Fragment}\n                    enter=\"transition ease-out duration-100\"\n                    enterFrom=\"transform opacity-0 scale-95\"\n                    enterTo=\"transform opacity-100 scale-100\"\n                    leave=\"transition ease-in duration-75\"\n                    leaveFrom=\"transform opacity-100 scale-100\"\n                    leaveTo=\"transform opacity-0 scale-95\"\n                >\n                    <Menu.Items\n                        className={clsx(\n                            origin,\n                            origin === 'origin-top-left' && 'right-0',\n                            'absolute mt-2 w-48 z-50 rounded-md shadow-lg py-1 cursor-pointer\\t bg-white ring-1 ring-black ring-opacity-5 focus:outline-none')}>\n                        {items\n                            .filter(a => a)\n                            .map(a => a as MenuItem)\n                            .map((item, index) => {\n                            return <Menu.Item  key={`menu-item=${index}`}>\n                                {({active}) => (\n                                    <a\n                                        onClick={(e) => {\n                                            e.preventDefault();\n                                            item.onClick();\n                                        }}\n                                        className={clsx(active ? 'bg-gray-100' : '', 'cursor-pointer block px-4 py-2 text-sm text-gray-700')}\n                                    >\n                                        {item.title}\n                                    </a>\n                                )}\n                            </Menu.Item>\n                        })}\n                    </Menu.Items>\n                </Transition>\n            </Menu>\n        </div>\n    );\n};\n\nexport default DropDownMenu;\n","import React, { useState } from 'react';\nimport './ChatInput.less';\nimport { ArrowCircleRightIcon, CheckCircleIcon } from '@heroicons/react/outline';\nimport clsx from 'clsx';\n\ninterface Props {\n    currentChannel?: string,\n    onSubmit?: (channel: string) => (void),\n    className?: string,\n}\n\nconst ChatInput = ({ currentChannel, onSubmit, className }: Props) => {\n\n    const [value, setValue] = useState('');\n\n    return (\n        <div className={clsx('chat-input items-center flex space-x-1', className)}>\n            <input\n                className={'bg-white text-black border-0 rounded-full h-7 px-4'}\n                value={value}\n                placeholder={currentChannel}\n                onKeyDown={e => {\n                    if (e.key === 'Enter') {\n                        if (onSubmit)\n                            onSubmit(value);\n                    }\n                }}\n                onChange={e => {\n                    setValue(e.target.value);\n                }}\n\n            />\n\n            {value.length === 0 || value === currentChannel ? (\n                <CheckCircleIcon className={'w-8 '} />\n            ) : (\n                <ArrowCircleRightIcon\n                    onClick={() => {\n                        if (onSubmit && value && value.length > 0)\n                            onSubmit(value);\n                    }}\n                    className={'w-8 cursor-pointer'} />\n            )}\n\n\n        </div>\n    );\n};\n\nexport default ChatInput;\n","export default __webpack_public_path__ + \"static/media/ChatInput.b6cbfb07.less\";","import React from 'react';\nimport './MainMenu.less';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authActions, authSelectors } from '../../../redux/auth';\nimport { twitchSelectors } from '../../../redux/twitch';\nimport UserInfo from '../../../components/Menu/UserInfo/UserInfo';\nimport DropDownMenu from '../../../components/DropDownMenu/DropDownMenu';\nimport { push } from 'connected-react-router';\nimport { MenuIcon, LoginIcon } from '@heroicons/react/outline';\nimport ChatInput from '../../../components/ChatInput/ChatInput';\nimport { chatActions, chatSelectors } from '../../../redux/chat';\nimport CONFIG from '../../../config';\n\nconst MainMenu = ({}) => {\n\n        const isLoggedIn = useSelector(authSelectors.isLoggedIn);\n        const user = useSelector(twitchSelectors.getUser);\n\n        const streamInfo = useSelector(twitchSelectors.getStreamInfo);\n\n        const currentChannel = useSelector(chatSelectors.getChannelName);\n\n        const dispatch = useDispatch();\n\n        return (\n            <menu className={'text-white bg-indigo-900 flex flex-row h-12 space-x-2 items-center p-2 fixed w-full top-0'}>\n\n\n                <DropDownMenu\n                    origin={'origin-top-right'}\n                    buttonComponent={<MenuIcon\n                        className={'bg-gray-800 hover:bg-indigo-500 transition rounded-full p-1 w-8'} />}\n                    items={[\n                        {\n                            title: 'Chat',\n                            onClick: () => {\n                                dispatch(push('/'));\n                            },\n                        },\n                        isLoggedIn && {\n                            title: 'Kanäle',\n                            onClick: () => {\n                                dispatch(push('/channels'));\n                            },\n                        },\n\n                    ].filter((a => a))}\n                />\n\n\n                <ChatInput\n                    onSubmit={(channel) => {\n                        dispatch(chatActions.selectChannel(channel));\n                    }}\n                    currentChannel={currentChannel} />\n\n                <div className={'flex flex-1 flex-shrink flex flex-row truncate'}>\n                    {streamInfo && (\n\n                        <div className={'stream-info flex flex-1 items-center flex-shrink space-x-4 truncate'}>\n                            <div\n                                className={'bg-purple-500 text-sm rounded-full items-center justify-center flex-shrink-0 flex p-1 px-2'}>\n                                {streamInfo.viewer_count}<span className={'hidden lg:block'}>&nbsp;Zuschauer</span>\n                            </div>\n                            <div className={'flex-shrink truncate'}>{streamInfo.title}</div>\n                        </div>\n\n\n                    )}\n                </div>\n\n\n                <div className={'flex-shrink-0  flex self-align-end'}>\n                    {user && (\n                        <DropDownMenu\n                            origin={'origin-top-left'}\n                            items={[\n                                {\n                                    title: 'Einstellungen',\n                                    onClick: () => {\n                                        dispatch(push('/settings'));\n                                    },\n                                },\n                                {\n                                    title: 'Abmelden',\n                                    onClick: () => {\n                                        dispatch(authActions.logout());\n                                    },\n                                },\n                            ]}\n                            buttonComponent={\n                                <UserInfo user={user} />\n                            } />\n                    )}\n                    {!isLoggedIn && (\n                        <div className={'text-white'}>\n                            <a className={'flex items-center'} href={`https://id.twitch.tv/oauth2/authorize?client_id=${CONFIG.TWITCH_CLIENT_ID}&redirect_uri=${window.location.origin}/minimal-twitch-chat-react/login/callback&force_verify=false&response_type=token&scope=${encodeURIComponent('chat:edit chat:read channel:moderate')}&claims=sub,exp`}>\n                                <LoginIcon className={'w-8 mr-2 cursor-pointer'} /> Anmelden\n                            </a>\n                        </div>\n                    )}\n                </div>\n            </menu>\n        );\n    }\n;\n\nexport default MainMenu;\n","import React, {ReactNode} from 'react';\nimport './BaseScreen.less';\nimport MainMenu from \"./MainMenu/MainMenu\";\n\nconst BaseScreen = ({children}: { children: ReactNode }) => {\n\n\n    return (\n        <div className='base-screen'>\n            <MainMenu/>\n            <div className={'content pt-12'}>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default BaseScreen;\n","import React, {useEffect} from 'react';\nimport './ChannelList.less';\nimport {useDispatch} from \"react-redux\";\nimport {twitchActions} from \"../../redux/twitch\";\nimport {getFollowedStreams} from \"../../redux/twitch/twitch.actions\";\n\nconst ChannelList = ({}) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch(twitchActions.getFollowedStreams())\n    },[])\n\n    return (\n        <div className='channel-list'>\n\n        </div>\n    );\n};\n\nexport default ChannelList;\n","export default __webpack_public_path__ + \"static/media/ChannelList.5c6b1372.less\";","import React from 'react';\n\nimport Chat from './screens/Chat/Chat';\nimport { Provider } from 'react-redux';\nimport store, { history, persistor } from './redux/store';\n\nimport { ConnectedRouter } from 'connected-react-router';\nimport AuthHandler from './screens/Auth/AuthHandler';\nimport BaseScreen from './screens/BaseScreen/BaseScreen';\nimport { Route, Switch } from 'react-router-dom';\nimport ChannelList from './screens/ChannelList/ChannelList';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nfunction App() {\n    return (\n        <div className='App dark:bg-black'>\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <ConnectedRouter history={history}>\n                        <AuthHandler>\n                            <Switch>\n                                <Route>\n                                    <BaseScreen>\n                                        <Switch>\n                                            <Route path={'/channels'}>\n                                                <ChannelList />\n                                            </Route>\n                                            <Route>\n                                                <Chat />\n                                            </Route>\n                                        </Switch>\n                                    </BaseScreen>\n                                </Route>\n                            </Switch>\n                        </AuthHandler>\n                    </ConnectedRouter>\n                </PersistGate>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}